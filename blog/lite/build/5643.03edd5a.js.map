{"version":3,"file":"5643.03edd5a.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/mermaid/dist/chunks/mermaid.core/chunk-4BX2VUAB.mjs","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/mermaid/dist/chunks/mermaid.core/chunk-QN33PNHL.mjs","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/mermaid/dist/chunks/mermaid.core/diagram-PSM6KHXK.mjs"],"sourcesContent":["import {\n  __name\n} from \"./chunk-AGHRB4JF.mjs\";\n\n// src/diagrams/common/populateCommonDb.ts\nfunction populateCommonDb(ast, db) {\n  if (ast.accDescr) {\n    db.setAccDescription?.(ast.accDescr);\n  }\n  if (ast.accTitle) {\n    db.setAccTitle?.(ast.accTitle);\n  }\n  if (ast.title) {\n    db.setDiagramTitle?.(ast.title);\n  }\n}\n__name(populateCommonDb, \"populateCommonDb\");\n\nexport {\n  populateCommonDb\n};\n","import {\n  configureSvgSize\n} from \"./chunk-ABZYJK2D.mjs\";\nimport {\n  __name,\n  log\n} from \"./chunk-AGHRB4JF.mjs\";\n\n// src/rendering-util/setupViewPortForSVG.ts\nvar setupViewPortForSVG = /* @__PURE__ */ __name((svg, padding, cssDiagram, useMaxWidth) => {\n  svg.attr(\"class\", cssDiagram);\n  const { width, height, x, y } = calculateDimensionsWithPadding(svg, padding);\n  configureSvgSize(svg, height, width, useMaxWidth);\n  const viewBox = createViewBox(x, y, width, height, padding);\n  svg.attr(\"viewBox\", viewBox);\n  log.debug(`viewBox configured: ${viewBox} with padding: ${padding}`);\n}, \"setupViewPortForSVG\");\nvar calculateDimensionsWithPadding = /* @__PURE__ */ __name((svg, padding) => {\n  const bounds = svg.node()?.getBBox() || { width: 0, height: 0, x: 0, y: 0 };\n  return {\n    width: bounds.width + padding * 2,\n    height: bounds.height + padding * 2,\n    x: bounds.x,\n    y: bounds.y\n  };\n}, \"calculateDimensionsWithPadding\");\nvar createViewBox = /* @__PURE__ */ __name((x, y, width, height, padding) => {\n  return `${x - padding} ${y - padding} ${width} ${height}`;\n}, \"createViewBox\");\n\nexport {\n  setupViewPortForSVG\n};\n","import {\n  selectSvgElement\n} from \"./chunk-EXTU4WIE.mjs\";\nimport {\n  setupViewPortForSVG\n} from \"./chunk-QN33PNHL.mjs\";\nimport {\n  isLabelStyle,\n  styles2String\n} from \"./chunk-ATLVNIR6.mjs\";\nimport {\n  populateCommonDb\n} from \"./chunk-4BX2VUAB.mjs\";\nimport {\n  cleanAndMerge\n} from \"./chunk-S3R3BYOJ.mjs\";\nimport {\n  clear,\n  configureSvgSize,\n  defaultConfig_default,\n  getAccDescription,\n  getAccTitle,\n  getConfig,\n  getDiagramTitle,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle\n} from \"./chunk-ABZYJK2D.mjs\";\nimport {\n  __name,\n  log\n} from \"./chunk-AGHRB4JF.mjs\";\n\n// src/diagrams/treemap/db.ts\nvar TreeMapDB = class {\n  constructor() {\n    this.nodes = [];\n    this.levels = /* @__PURE__ */ new Map();\n    this.outerNodes = [];\n    this.classes = /* @__PURE__ */ new Map();\n    this.setAccTitle = setAccTitle;\n    this.getAccTitle = getAccTitle;\n    this.setDiagramTitle = setDiagramTitle;\n    this.getDiagramTitle = getDiagramTitle;\n    this.getAccDescription = getAccDescription;\n    this.setAccDescription = setAccDescription;\n  }\n  static {\n    __name(this, \"TreeMapDB\");\n  }\n  getNodes() {\n    return this.nodes;\n  }\n  getConfig() {\n    const defaultConfig = defaultConfig_default;\n    const userConfig = getConfig();\n    return cleanAndMerge({\n      ...defaultConfig.treemap,\n      ...userConfig.treemap ?? {}\n    });\n  }\n  addNode(node, level) {\n    this.nodes.push(node);\n    this.levels.set(node, level);\n    if (level === 0) {\n      this.outerNodes.push(node);\n      this.root ??= node;\n    }\n  }\n  getRoot() {\n    return { name: \"\", children: this.outerNodes };\n  }\n  addClass(id, _style) {\n    const styleClass = this.classes.get(id) ?? { id, styles: [], textStyles: [] };\n    const styles = _style.replace(/\\\\,/g, \"\\xA7\\xA7\\xA7\").replace(/,/g, \";\").replace(/§§§/g, \",\").split(\";\");\n    if (styles) {\n      styles.forEach((s) => {\n        if (isLabelStyle(s)) {\n          if (styleClass?.textStyles) {\n            styleClass.textStyles.push(s);\n          } else {\n            styleClass.textStyles = [s];\n          }\n        }\n        if (styleClass?.styles) {\n          styleClass.styles.push(s);\n        } else {\n          styleClass.styles = [s];\n        }\n      });\n    }\n    this.classes.set(id, styleClass);\n  }\n  getClasses() {\n    return this.classes;\n  }\n  getStylesForClass(classSelector) {\n    return this.classes.get(classSelector)?.styles ?? [];\n  }\n  clear() {\n    clear();\n    this.nodes = [];\n    this.levels = /* @__PURE__ */ new Map();\n    this.outerNodes = [];\n    this.classes = /* @__PURE__ */ new Map();\n    this.root = void 0;\n  }\n};\n\n// src/diagrams/treemap/parser.ts\nimport { parse } from \"@mermaid-js/parser\";\n\n// src/diagrams/treemap/utils.ts\nfunction buildHierarchy(items) {\n  if (!items.length) {\n    return [];\n  }\n  const root = [];\n  const stack = [];\n  items.forEach((item) => {\n    const node = {\n      name: item.name,\n      children: item.type === \"Leaf\" ? void 0 : []\n    };\n    node.classSelector = item?.classSelector;\n    if (item?.cssCompiledStyles) {\n      node.cssCompiledStyles = [item.cssCompiledStyles];\n    }\n    if (item.type === \"Leaf\" && item.value !== void 0) {\n      node.value = item.value;\n    }\n    while (stack.length > 0 && stack[stack.length - 1].level >= item.level) {\n      stack.pop();\n    }\n    if (stack.length === 0) {\n      root.push(node);\n    } else {\n      const parent = stack[stack.length - 1].node;\n      if (parent.children) {\n        parent.children.push(node);\n      } else {\n        parent.children = [node];\n      }\n    }\n    if (item.type !== \"Leaf\") {\n      stack.push({ node, level: item.level });\n    }\n  });\n  return root;\n}\n__name(buildHierarchy, \"buildHierarchy\");\n\n// src/diagrams/treemap/parser.ts\nvar populate = /* @__PURE__ */ __name((ast, db) => {\n  populateCommonDb(ast, db);\n  const items = [];\n  for (const row of ast.TreemapRows ?? []) {\n    if (row.$type === \"ClassDefStatement\") {\n      db.addClass(row.className ?? \"\", row.styleText ?? \"\");\n    }\n  }\n  for (const row of ast.TreemapRows ?? []) {\n    const item = row.item;\n    if (!item) {\n      continue;\n    }\n    const level = row.indent ? parseInt(row.indent) : 0;\n    const name = getItemName(item);\n    const styles = item.classSelector ? db.getStylesForClass(item.classSelector) : [];\n    const cssCompiledStyles = styles.length > 0 ? styles.join(\";\") : void 0;\n    const itemData = {\n      level,\n      name,\n      type: item.$type,\n      value: item.value,\n      classSelector: item.classSelector,\n      cssCompiledStyles\n    };\n    items.push(itemData);\n  }\n  const hierarchyNodes = buildHierarchy(items);\n  const addNodesRecursively = /* @__PURE__ */ __name((nodes, level) => {\n    for (const node of nodes) {\n      db.addNode(node, level);\n      if (node.children && node.children.length > 0) {\n        addNodesRecursively(node.children, level + 1);\n      }\n    }\n  }, \"addNodesRecursively\");\n  addNodesRecursively(hierarchyNodes, 0);\n}, \"populate\");\nvar getItemName = /* @__PURE__ */ __name((item) => {\n  return item.name ? String(item.name) : \"\";\n}, \"getItemName\");\nvar parser = {\n  // @ts-expect-error - TreeMapDB is not assignable to DiagramDB\n  parser: { yy: void 0 },\n  parse: /* @__PURE__ */ __name(async (text) => {\n    try {\n      const parseFunc = parse;\n      const ast = await parseFunc(\"treemap\", text);\n      log.debug(\"Treemap AST:\", ast);\n      const db = parser.parser?.yy;\n      if (!(db instanceof TreeMapDB)) {\n        throw new Error(\n          \"parser.parser?.yy was not a TreemapDB. This is due to a bug within Mermaid, please report this issue at https://github.com/mermaid-js/mermaid/issues.\"\n        );\n      }\n      populate(ast, db);\n    } catch (error) {\n      log.error(\"Error parsing treemap:\", error);\n      throw error;\n    }\n  }, \"parse\")\n};\n\n// src/diagrams/treemap/renderer.ts\nimport { scaleOrdinal, treemap, hierarchy, format, select } from \"d3\";\nvar DEFAULT_INNER_PADDING = 10;\nvar SECTION_INNER_PADDING = 10;\nvar SECTION_HEADER_HEIGHT = 25;\nvar draw = /* @__PURE__ */ __name((_text, id, _version, diagram2) => {\n  const treemapDb = diagram2.db;\n  const config = treemapDb.getConfig();\n  const treemapInnerPadding = config.padding ?? DEFAULT_INNER_PADDING;\n  const title = treemapDb.getDiagramTitle();\n  const root = treemapDb.getRoot();\n  const { themeVariables } = getConfig();\n  if (!root) {\n    return;\n  }\n  const titleHeight = title ? 30 : 0;\n  const svg = selectSvgElement(id);\n  const width = config.nodeWidth ? config.nodeWidth * SECTION_INNER_PADDING : 960;\n  const height = config.nodeHeight ? config.nodeHeight * SECTION_INNER_PADDING : 500;\n  const svgWidth = width;\n  const svgHeight = height + titleHeight;\n  svg.attr(\"viewBox\", `0 0 ${svgWidth} ${svgHeight}`);\n  configureSvgSize(svg, svgHeight, svgWidth, config.useMaxWidth);\n  let valueFormat;\n  try {\n    const formatStr = config.valueFormat || \",\";\n    if (formatStr === \"$0,0\") {\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(\",\")(value), \"valueFormat\");\n    } else if (formatStr.startsWith(\"$\") && formatStr.includes(\",\")) {\n      const precision = /\\.\\d+/.exec(formatStr);\n      const precisionStr = precision ? precision[0] : \"\";\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(\",\" + precisionStr)(value), \"valueFormat\");\n    } else if (formatStr.startsWith(\"$\")) {\n      const restOfFormat = formatStr.substring(1);\n      valueFormat = /* @__PURE__ */ __name((value) => \"$\" + format(restOfFormat || \"\")(value), \"valueFormat\");\n    } else {\n      valueFormat = format(formatStr);\n    }\n  } catch (error) {\n    log.error(\"Error creating format function:\", error);\n    valueFormat = format(\",\");\n  }\n  const colorScale = scaleOrdinal().range([\n    \"transparent\",\n    themeVariables.cScale0,\n    themeVariables.cScale1,\n    themeVariables.cScale2,\n    themeVariables.cScale3,\n    themeVariables.cScale4,\n    themeVariables.cScale5,\n    themeVariables.cScale6,\n    themeVariables.cScale7,\n    themeVariables.cScale8,\n    themeVariables.cScale9,\n    themeVariables.cScale10,\n    themeVariables.cScale11\n  ]);\n  const colorScalePeer = scaleOrdinal().range([\n    \"transparent\",\n    themeVariables.cScalePeer0,\n    themeVariables.cScalePeer1,\n    themeVariables.cScalePeer2,\n    themeVariables.cScalePeer3,\n    themeVariables.cScalePeer4,\n    themeVariables.cScalePeer5,\n    themeVariables.cScalePeer6,\n    themeVariables.cScalePeer7,\n    themeVariables.cScalePeer8,\n    themeVariables.cScalePeer9,\n    themeVariables.cScalePeer10,\n    themeVariables.cScalePeer11\n  ]);\n  const colorScaleLabel = scaleOrdinal().range([\n    themeVariables.cScaleLabel0,\n    themeVariables.cScaleLabel1,\n    themeVariables.cScaleLabel2,\n    themeVariables.cScaleLabel3,\n    themeVariables.cScaleLabel4,\n    themeVariables.cScaleLabel5,\n    themeVariables.cScaleLabel6,\n    themeVariables.cScaleLabel7,\n    themeVariables.cScaleLabel8,\n    themeVariables.cScaleLabel9,\n    themeVariables.cScaleLabel10,\n    themeVariables.cScaleLabel11\n  ]);\n  if (title) {\n    svg.append(\"text\").attr(\"x\", svgWidth / 2).attr(\"y\", titleHeight / 2).attr(\"class\", \"treemapTitle\").attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").text(title);\n  }\n  const g = svg.append(\"g\").attr(\"transform\", `translate(0, ${titleHeight})`).attr(\"class\", \"treemapContainer\");\n  const hierarchyRoot = hierarchy(root).sum((d) => d.value ?? 0).sort((a, b) => (b.value ?? 0) - (a.value ?? 0));\n  const treemapLayout = treemap().size([width, height]).paddingTop(\n    (d) => d.children && d.children.length > 0 ? SECTION_HEADER_HEIGHT + SECTION_INNER_PADDING : 0\n  ).paddingInner(treemapInnerPadding).paddingLeft((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).paddingRight((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).paddingBottom((d) => d.children && d.children.length > 0 ? SECTION_INNER_PADDING : 0).round(true);\n  const treemapData = treemapLayout(hierarchyRoot);\n  const branchNodes = treemapData.descendants().filter((d) => d.children && d.children.length > 0);\n  const sections = g.selectAll(\".treemapSection\").data(branchNodes).enter().append(\"g\").attr(\"class\", \"treemapSection\").attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\n  sections.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", SECTION_HEADER_HEIGHT).attr(\"class\", \"treemapSectionHeader\").attr(\"fill\", \"none\").attr(\"fill-opacity\", 0.6).attr(\"stroke-width\", 0.6).attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    return \"\";\n  });\n  sections.append(\"clipPath\").attr(\"id\", (_d, i) => `clip-section-${id}-${i}`).append(\"rect\").attr(\"width\", (d) => Math.max(0, d.x1 - d.x0 - 12)).attr(\"height\", SECTION_HEADER_HEIGHT);\n  sections.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", (d) => d.y1 - d.y0).attr(\"class\", (_d, i) => {\n    return `treemapSection section${i}`;\n  }).attr(\"fill\", (d) => colorScale(d.data.name)).attr(\"fill-opacity\", 0.6).attr(\"stroke\", (d) => colorScalePeer(d.data.name)).attr(\"stroke-width\", 2).attr(\"stroke-opacity\", 0.4).attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return styles.nodeStyles + \";\" + styles.borderStyles.join(\";\");\n  });\n  sections.append(\"text\").attr(\"class\", \"treemapSectionLabel\").attr(\"x\", 6).attr(\"y\", SECTION_HEADER_HEIGHT / 2).attr(\"dominant-baseline\", \"middle\").text((d) => d.depth === 0 ? \"\" : d.data.name).attr(\"font-weight\", \"bold\").attr(\"style\", (d) => {\n    if (d.depth === 0) {\n      return \"display: none;\";\n    }\n    const labelStyles = \"dominant-baseline: middle; font-size: 12px; fill:\" + colorScaleLabel(d.data.name) + \"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\";\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n  }).each(function(d) {\n    if (d.depth === 0) {\n      return;\n    }\n    const self = select(this);\n    const originalText = d.data.name;\n    self.text(originalText);\n    const totalHeaderWidth = d.x1 - d.x0;\n    const labelXPosition = 6;\n    let spaceForTextContent;\n    if (config.showValues !== false && d.value) {\n      const valueEndsAtXRelative = totalHeaderWidth - 10;\n      const estimatedValueTextActualWidth = 30;\n      const gapBetweenLabelAndValue = 10;\n      const labelMustEndBeforeX = valueEndsAtXRelative - estimatedValueTextActualWidth - gapBetweenLabelAndValue;\n      spaceForTextContent = labelMustEndBeforeX - labelXPosition;\n    } else {\n      const labelOwnRightPadding = 6;\n      spaceForTextContent = totalHeaderWidth - labelXPosition - labelOwnRightPadding;\n    }\n    const minimumWidthToDisplay = 15;\n    const actualAvailableWidth = Math.max(minimumWidthToDisplay, spaceForTextContent);\n    const textNode = self.node();\n    const currentTextContentLength = textNode.getComputedTextLength();\n    if (currentTextContentLength > actualAvailableWidth) {\n      const ellipsis = \"...\";\n      let currentTruncatedText = originalText;\n      while (currentTruncatedText.length > 0) {\n        currentTruncatedText = originalText.substring(0, currentTruncatedText.length - 1);\n        if (currentTruncatedText.length === 0) {\n          self.text(ellipsis);\n          if (textNode.getComputedTextLength() > actualAvailableWidth) {\n            self.text(\"\");\n          }\n          break;\n        }\n        self.text(currentTruncatedText + ellipsis);\n        if (textNode.getComputedTextLength() <= actualAvailableWidth) {\n          break;\n        }\n      }\n    }\n  });\n  if (config.showValues !== false) {\n    sections.append(\"text\").attr(\"class\", \"treemapSectionValue\").attr(\"x\", (d) => d.x1 - d.x0 - 10).attr(\"y\", SECTION_HEADER_HEIGHT / 2).attr(\"text-anchor\", \"end\").attr(\"dominant-baseline\", \"middle\").text((d) => d.value ? valueFormat(d.value) : \"\").attr(\"font-style\", \"italic\").attr(\"style\", (d) => {\n      if (d.depth === 0) {\n        return \"display: none;\";\n      }\n      const labelStyles = \"text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:\" + colorScaleLabel(d.data.name) + \"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\";\n      const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n      return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n    });\n  }\n  const leafNodes = treemapData.leaves();\n  const cell = g.selectAll(\".treemapLeafGroup\").data(leafNodes).enter().append(\"g\").attr(\"class\", (d, i) => {\n    return `treemapNode treemapLeafGroup leaf${i}${d.data.classSelector ? ` ${d.data.classSelector}` : \"\"}x`;\n  }).attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\n  cell.append(\"rect\").attr(\"width\", (d) => d.x1 - d.x0).attr(\"height\", (d) => d.y1 - d.y0).attr(\"class\", \"treemapLeaf\").attr(\"fill\", (d) => {\n    return d.parent ? colorScale(d.parent.data.name) : colorScale(d.data.name);\n  }).attr(\"style\", (d) => {\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return styles.nodeStyles;\n  }).attr(\"fill-opacity\", 0.3).attr(\"stroke\", (d) => {\n    return d.parent ? colorScale(d.parent.data.name) : colorScale(d.data.name);\n  }).attr(\"stroke-width\", 3);\n  cell.append(\"clipPath\").attr(\"id\", (_d, i) => `clip-${id}-${i}`).append(\"rect\").attr(\"width\", (d) => Math.max(0, d.x1 - d.x0 - 4)).attr(\"height\", (d) => Math.max(0, d.y1 - d.y0 - 4));\n  const leafLabels = cell.append(\"text\").attr(\"class\", \"treemapLabel\").attr(\"x\", (d) => (d.x1 - d.x0) / 2).attr(\"y\", (d) => (d.y1 - d.y0) / 2).attr(\"style\", (d) => {\n    const labelStyles = \"text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:\" + colorScaleLabel(d.data.name) + \";\";\n    const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n    return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n  }).attr(\"clip-path\", (_d, i) => `url(#clip-${id}-${i})`).text((d) => d.data.name);\n  leafLabels.each(function(d) {\n    const self = select(this);\n    const nodeWidth = d.x1 - d.x0;\n    const nodeHeight = d.y1 - d.y0;\n    const textNode = self.node();\n    const padding = 4;\n    const availableWidth = nodeWidth - 2 * padding;\n    const availableHeight = nodeHeight - 2 * padding;\n    if (availableWidth < 10 || availableHeight < 10) {\n      self.style(\"display\", \"none\");\n      return;\n    }\n    let currentLabelFontSize = parseInt(self.style(\"font-size\"), 10);\n    const minLabelFontSize = 8;\n    const originalValueRelFontSize = 28;\n    const valueScaleFactor = 0.6;\n    const minValueFontSize = 6;\n    const spacingBetweenLabelAndValue = 2;\n    while (textNode.getComputedTextLength() > availableWidth && currentLabelFontSize > minLabelFontSize) {\n      currentLabelFontSize--;\n      self.style(\"font-size\", `${currentLabelFontSize}px`);\n    }\n    let prospectiveValueFontSize = Math.max(\n      minValueFontSize,\n      Math.min(originalValueRelFontSize, Math.round(currentLabelFontSize * valueScaleFactor))\n    );\n    let combinedHeight = currentLabelFontSize + spacingBetweenLabelAndValue + prospectiveValueFontSize;\n    while (combinedHeight > availableHeight && currentLabelFontSize > minLabelFontSize) {\n      currentLabelFontSize--;\n      prospectiveValueFontSize = Math.max(\n        minValueFontSize,\n        Math.min(originalValueRelFontSize, Math.round(currentLabelFontSize * valueScaleFactor))\n      );\n      if (prospectiveValueFontSize < minValueFontSize && currentLabelFontSize === minLabelFontSize) {\n        break;\n      }\n      self.style(\"font-size\", `${currentLabelFontSize}px`);\n      combinedHeight = currentLabelFontSize + spacingBetweenLabelAndValue + prospectiveValueFontSize;\n      if (prospectiveValueFontSize <= minValueFontSize && combinedHeight > availableHeight) {\n      }\n    }\n    self.style(\"font-size\", `${currentLabelFontSize}px`);\n    if (textNode.getComputedTextLength() > availableWidth || currentLabelFontSize < minLabelFontSize || availableHeight < currentLabelFontSize) {\n      self.style(\"display\", \"none\");\n    }\n  });\n  if (config.showValues !== false) {\n    const leafValues = cell.append(\"text\").attr(\"class\", \"treemapValue\").attr(\"x\", (d) => (d.x1 - d.x0) / 2).attr(\"y\", function(d) {\n      return (d.y1 - d.y0) / 2;\n    }).attr(\"style\", (d) => {\n      const labelStyles = \"text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:\" + colorScaleLabel(d.data.name) + \";\";\n      const styles = styles2String({ cssCompiledStyles: d.data.cssCompiledStyles });\n      return labelStyles + styles.labelStyles.replace(\"color:\", \"fill:\");\n    }).attr(\"clip-path\", (_d, i) => `url(#clip-${id}-${i})`).text((d) => d.value ? valueFormat(d.value) : \"\");\n    leafValues.each(function(d) {\n      const valueTextElement = select(this);\n      const parentCellNode = this.parentNode;\n      if (!parentCellNode) {\n        valueTextElement.style(\"display\", \"none\");\n        return;\n      }\n      const labelElement = select(parentCellNode).select(\".treemapLabel\");\n      if (labelElement.empty() || labelElement.style(\"display\") === \"none\") {\n        valueTextElement.style(\"display\", \"none\");\n        return;\n      }\n      const finalLabelFontSize = parseFloat(labelElement.style(\"font-size\"));\n      const originalValueFontSize = 28;\n      const valueScaleFactor = 0.6;\n      const minValueFontSize = 6;\n      const spacingBetweenLabelAndValue = 2;\n      const actualValueFontSize = Math.max(\n        minValueFontSize,\n        Math.min(originalValueFontSize, Math.round(finalLabelFontSize * valueScaleFactor))\n      );\n      valueTextElement.style(\"font-size\", `${actualValueFontSize}px`);\n      const labelCenterY = (d.y1 - d.y0) / 2;\n      const valueTopActualY = labelCenterY + finalLabelFontSize / 2 + spacingBetweenLabelAndValue;\n      valueTextElement.attr(\"y\", valueTopActualY);\n      const nodeWidth = d.x1 - d.x0;\n      const nodeTotalHeight = d.y1 - d.y0;\n      const cellBottomPadding = 4;\n      const maxValueBottomY = nodeTotalHeight - cellBottomPadding;\n      const availableWidthForValue = nodeWidth - 2 * 4;\n      if (valueTextElement.node().getComputedTextLength() > availableWidthForValue || valueTopActualY + actualValueFontSize > maxValueBottomY || actualValueFontSize < minValueFontSize) {\n        valueTextElement.style(\"display\", \"none\");\n      } else {\n        valueTextElement.style(\"display\", null);\n      }\n    });\n  }\n  const diagramPadding = config.diagramPadding ?? 8;\n  setupViewPortForSVG(svg, diagramPadding, \"flowchart\", config?.useMaxWidth || false);\n}, \"draw\");\nvar getClasses = /* @__PURE__ */ __name(function(_text, diagramObj) {\n  return diagramObj.db.getClasses();\n}, \"getClasses\");\nvar renderer = { draw, getClasses };\n\n// src/diagrams/treemap/styles.ts\nvar defaultTreemapStyleOptions = {\n  sectionStrokeColor: \"black\",\n  sectionStrokeWidth: \"1\",\n  sectionFillColor: \"#efefef\",\n  leafStrokeColor: \"black\",\n  leafStrokeWidth: \"1\",\n  leafFillColor: \"#efefef\",\n  labelColor: \"black\",\n  labelFontSize: \"12px\",\n  valueFontSize: \"10px\",\n  valueColor: \"black\",\n  titleColor: \"black\",\n  titleFontSize: \"14px\"\n};\nvar getStyles = /* @__PURE__ */ __name(({\n  treemap: treemap2\n} = {}) => {\n  const options = cleanAndMerge(defaultTreemapStyleOptions, treemap2);\n  return `\n  .treemapNode.section {\n    stroke: ${options.sectionStrokeColor};\n    stroke-width: ${options.sectionStrokeWidth};\n    fill: ${options.sectionFillColor};\n  }\n  .treemapNode.leaf {\n    stroke: ${options.leafStrokeColor};\n    stroke-width: ${options.leafStrokeWidth};\n    fill: ${options.leafFillColor};\n  }\n  .treemapLabel {\n    fill: ${options.labelColor};\n    font-size: ${options.labelFontSize};\n  }\n  .treemapValue {\n    fill: ${options.valueColor};\n    font-size: ${options.valueFontSize};\n  }\n  .treemapTitle {\n    fill: ${options.titleColor};\n    font-size: ${options.titleFontSize};\n  }\n  `;\n}, \"getStyles\");\nvar styles_default = getStyles;\n\n// src/diagrams/treemap/diagram.ts\nvar diagram = {\n  parser,\n  get db() {\n    return new TreeMapDB();\n  },\n  renderer,\n  styles: styles_default\n};\nexport {\n  diagram\n};\n"],"names":["populateCommonDb","ast","db","accDescr","setAccDescription","accTitle","setAccTitle","title","setDiagramTitle","setupViewPortForSVG","svg","padding","cssDiagram","useMaxWidth","attr","width","height","x","y","calculateDimensionsWithPadding","viewBox","createViewBox","debug","bounds","node","getBBox","TreeMapDB","constructor","this","nodes","levels","Map","outerNodes","classes","getAccTitle","getDiagramTitle","getAccDescription","getNodes","getConfig","defaultConfig","userConfig","treemap","addNode","level","push","set","root","getRoot","name","children","addClass","id","_style","styleClass","get","styles","textStyles","replace","split","forEach","s","getClasses","getStylesForClass","classSelector","clear","buildHierarchy","items","length","stack","item","type","cssCompiledStyles","value","pop","parent","populate","row","TreemapRows","$type","className","styleText","indent","parseInt","getItemName","join","itemData","hierarchyNodes","addNodesRecursively","String","parser","yy","parse","async","text","parseFunc","Error","error","defaultTreemapStyleOptions","sectionStrokeColor","sectionStrokeWidth","sectionFillColor","leafStrokeColor","leafStrokeWidth","leafFillColor","labelColor","labelFontSize","valueFontSize","valueColor","titleColor","titleFontSize","diagram","renderer","draw","_text","_version","diagram2","treemapDb","config","treemapInnerPadding","themeVariables","titleHeight","nodeWidth","nodeHeight","svgWidth","svgHeight","valueFormat","formatStr","startsWith","includes","precision","exec","precisionStr","restOfFormat","substring","colorScale","range","cScale0","cScale1","cScale2","cScale3","cScale4","cScale5","cScale6","cScale7","cScale8","cScale9","cScale10","cScale11","colorScalePeer","cScalePeer0","cScalePeer1","cScalePeer2","cScalePeer3","cScalePeer4","cScalePeer5","cScalePeer6","cScalePeer7","cScalePeer8","cScalePeer9","cScalePeer10","cScalePeer11","colorScaleLabel","cScaleLabel0","cScaleLabel1","cScaleLabel2","cScaleLabel3","cScaleLabel4","cScaleLabel5","cScaleLabel6","cScaleLabel7","cScaleLabel8","cScaleLabel9","cScaleLabel10","cScaleLabel11","append","g","hierarchyRoot","sum","d","sort","a","b","treemapData","size","paddingTop","SECTION_HEADER_HEIGHT","paddingInner","paddingLeft","paddingRight","paddingBottom","round","treemapLayout","branchNodes","descendants","filter","sections","selectAll","data","enter","x0","y0","x1","depth","_d","i","Math","max","y1","nodeStyles","borderStyles","labelStyles","each","self","originalText","totalHeaderWidth","spaceForTextContent","showValues","actualAvailableWidth","textNode","getComputedTextLength","ellipsis","currentTruncatedText","leafNodes","leaves","cell","availableWidth","availableHeight","style","currentLabelFontSize","prospectiveValueFontSize","min","combinedHeight","valueTextElement","parentCellNode","parentNode","labelElement","select","empty","finalLabelFontSize","parseFloat","actualValueFontSize","valueTopActualY","maxValueBottomY","availableWidthForValue","diagramPadding","diagramObj","treemap2","options"],"sourceRoot":""}