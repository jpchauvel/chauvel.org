{"version":3,"file":"6941.26af9fd.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter-notebook/notebook-extension/lib/trusted.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter-notebook/notebook-extension/lib/index.js"],"sourcesContent":["import { ReactWidget } from '@jupyterlab/apputils';\nimport { NotebookActions } from '@jupyterlab/notebook';\nimport React, { useEffect, useState } from 'react';\n/**\n * Check if a notebook is trusted\n * @param notebook The notebook to check\n * @returns true if the notebook is trusted, false otherwise\n */\nconst isTrusted = (notebook) => {\n    const model = notebook.model;\n    if (!model) {\n        return false;\n    }\n    const cells = Array.from(model.cells);\n    let total = 0;\n    let trusted = 0;\n    for (const currentCell of cells) {\n        if (currentCell.type !== 'code') {\n            continue;\n        }\n        total++;\n        if (currentCell.trusted) {\n            trusted++;\n        }\n    }\n    return trusted === total;\n};\n/**\n * A React component to display the Trusted badge in the menu bar.\n * @param notebook The Notebook\n * @param translator The Translation service\n */\nconst TrustedButton = ({ notebook, translator, }) => {\n    const trans = translator.load('notebook');\n    const [trusted, setTrusted] = useState(isTrusted(notebook));\n    const checkTrust = () => {\n        const v = isTrusted(notebook);\n        setTrusted(v);\n    };\n    const trust = async () => {\n        await NotebookActions.trust(notebook, translator);\n        checkTrust();\n    };\n    useEffect(() => {\n        notebook.modelContentChanged.connect(checkTrust);\n        notebook.activeCellChanged.connect(checkTrust);\n        checkTrust();\n        return () => {\n            notebook.modelContentChanged.disconnect(checkTrust);\n            notebook.activeCellChanged.disconnect(checkTrust);\n        };\n    });\n    return (React.createElement(\"button\", { className: 'jp-NotebookTrustedStatus', style: !trusted ? { cursor: 'pointer' } : { cursor: 'help' }, onClick: () => !trusted && trust(), title: trusted\n            ? trans.__('JavaScript enabled for notebook display')\n            : trans.__('JavaScript disabled for notebook display') }, trusted ? trans.__('Trusted') : trans.__('Not Trusted')));\n};\n/**\n * A namespace for TrustedComponent static methods.\n */\nexport var TrustedComponent;\n(function (TrustedComponent) {\n    /**\n     * Create a new TrustedComponent\n     *\n     * @param notebook The notebook\n     * @param translator The translator\n     */\n    TrustedComponent.create = ({ notebook, translator, }) => {\n        return ReactWidget.create(React.createElement(TrustedButton, { notebook: notebook, translator: translator }));\n    };\n})(TrustedComponent || (TrustedComponent = {}));\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DOMUtils, IToolbarWidgetRegistry, ICommandPalette, } from '@jupyterlab/apputils';\nimport { PageConfig, Text, Time, URLExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { NotebookPanel, INotebookTracker, INotebookTools, } from '@jupyterlab/notebook';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { INotebookShell } from '@jupyter-notebook/application';\nimport { Poll } from '@lumino/polling';\nimport { Widget } from '@lumino/widgets';\nimport { TrustedComponent } from './trusted';\n/**\n * The class for kernel status errors.\n */\nconst KERNEL_STATUS_ERROR_CLASS = 'jp-NotebookKernelStatus-error';\n/**\n * The class for kernel status warnings.\n */\nconst KERNEL_STATUS_WARN_CLASS = 'jp-NotebookKernelStatus-warn';\n/**\n * The class for kernel status infos.\n */\nconst KERNEL_STATUS_INFO_CLASS = 'jp-NotebookKernelStatus-info';\n/**\n * The class to fade out the kernel status.\n */\nconst KERNEL_STATUS_FADE_OUT_CLASS = 'jp-NotebookKernelStatus-fade';\n/**\n * The class for scrolled outputs\n */\nconst SCROLLED_OUTPUTS_CLASS = 'jp-mod-outputsScrolled';\n/**\n * The class for the full width notebook\n */\nconst FULL_WIDTH_NOTEBOOK_CLASS = 'jp-mod-fullwidth';\n/**\n * The command IDs used by the notebook plugins.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    /**\n     * A command to open right sidebar for Editing Notebook Metadata\n     */\n    CommandIDs.openEditNotebookMetadata = 'notebook:edit-metadata';\n    /**\n     * A command to toggle full width of the notebook\n     */\n    CommandIDs.toggleFullWidth = 'notebook:toggle-full-width';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * A plugin for the checkpoint indicator\n */\nconst checkpoints = {\n    id: '@jupyter-notebook/notebook-extension:checkpoints',\n    description: 'A plugin for the checkpoint indicator.',\n    autoStart: true,\n    requires: [IDocumentManager, ITranslator],\n    optional: [INotebookShell, IToolbarWidgetRegistry, ISettingRegistry],\n    activate: (app, docManager, translator, notebookShell, toolbarRegistry, settingRegistry) => {\n        const { shell } = app;\n        const trans = translator.load('notebook');\n        const node = document.createElement('div');\n        if (toolbarRegistry) {\n            toolbarRegistry.addFactory('TopBar', 'checkpoint', (toolbar) => {\n                const widget = new Widget({ node });\n                widget.id = DOMUtils.createDomID();\n                widget.addClass('jp-NotebookCheckpoint');\n                return widget;\n            });\n        }\n        const getCurrent = () => {\n            const current = shell.currentWidget;\n            if (!current) {\n                return null;\n            }\n            const context = docManager.contextForWidget(current);\n            if (!context) {\n                return null;\n            }\n            return context;\n        };\n        const updateCheckpointDisplay = async () => {\n            const current = getCurrent();\n            if (!current) {\n                return;\n            }\n            const checkpoints = await current.listCheckpoints();\n            if (!checkpoints || !checkpoints.length) {\n                node.textContent = '';\n                return;\n            }\n            const checkpoint = checkpoints[checkpoints.length - 1];\n            node.textContent = trans.__('Last Checkpoint: %1', Time.formatHuman(new Date(checkpoint.last_modified)));\n        };\n        const onSaveState = async (sender, state) => {\n            if (state !== 'completed') {\n                return;\n            }\n            // Add a small artificial delay so that the UI can pick up the newly created checkpoint.\n            // Since the save state signal is emitted after a file save, but not after a checkpoint has been created.\n            setTimeout(() => {\n                void updateCheckpointDisplay();\n            }, 500);\n        };\n        const onChange = async () => {\n            const context = getCurrent();\n            if (!context) {\n                return;\n            }\n            context.saveState.disconnect(onSaveState);\n            context.saveState.connect(onSaveState);\n            await updateCheckpointDisplay();\n        };\n        if (notebookShell) {\n            notebookShell.currentChanged.connect(onChange);\n        }\n        let checkpointPollingInterval = 30; // Default 30 seconds\n        let poll = null;\n        const createPoll = () => {\n            if (poll) {\n                poll.dispose();\n            }\n            if (checkpointPollingInterval > 0) {\n                poll = new Poll({\n                    auto: true,\n                    factory: () => updateCheckpointDisplay(),\n                    frequency: {\n                        interval: checkpointPollingInterval * 1000,\n                        backoff: false,\n                    },\n                    standby: 'when-hidden',\n                });\n            }\n        };\n        const updateSettings = (settings) => {\n            checkpointPollingInterval = settings.get('checkpointPollingInterval')\n                .composite;\n            createPoll();\n        };\n        if (settingRegistry) {\n            const loadSettings = settingRegistry.load(checkpoints.id);\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                updateSettings(settings);\n                settings.changed.connect(updateSettings);\n            })\n                .catch((reason) => {\n                console.error(`Failed to load settings for ${checkpoints.id}: ${reason.message}`);\n                // Fall back to creating poll with default settings\n                createPoll();\n            });\n        }\n        else {\n            // Create poll with default settings\n            createPoll();\n        }\n    },\n};\n/**\n * Add a command to close the browser tab when clicking on \"Close and Shut Down\"\n */\nconst closeTab = {\n    id: '@jupyter-notebook/notebook-extension:close-tab',\n    description: 'Add a command to close the browser tab when clicking on \"Close and Shut Down\".',\n    autoStart: true,\n    requires: [IMainMenu],\n    optional: [ITranslator],\n    activate: (app, menu, translator) => {\n        const { commands } = app;\n        translator = translator !== null && translator !== void 0 ? translator : nullTranslator;\n        const trans = translator.load('notebook');\n        const id = 'notebook:close-and-halt';\n        commands.addCommand(id, {\n            label: trans.__('Close and Shut Down Notebook'),\n            execute: async () => {\n                // Shut the kernel down, without confirmation\n                await commands.execute('notebook:shutdown-kernel', { activate: false });\n                window.close();\n            },\n        });\n        menu.fileMenu.closeAndCleaners.add({\n            id,\n            // use a small rank to it takes precedence over the default\n            // shut down action for the notebook\n            rank: 0,\n        });\n    },\n};\n/**\n * Add a command to open the tree view from the notebook view\n */\nconst openTreeTab = {\n    id: '@jupyter-notebook/notebook-extension:open-tree-tab',\n    description: 'Add a command to open a browser tab on the tree view when clicking \"Open...\".',\n    autoStart: true,\n    optional: [ITranslator],\n    activate: (app, translator) => {\n        const { commands } = app;\n        translator = translator !== null && translator !== void 0 ? translator : nullTranslator;\n        const trans = translator.load('notebook');\n        const id = 'notebook:open-tree-tab';\n        commands.addCommand(id, {\n            label: trans.__('Open…'),\n            execute: async () => {\n                const url = URLExt.join(PageConfig.getBaseUrl(), 'tree');\n                window.open(url);\n            },\n        });\n    },\n};\n/**\n * A plugin to set the notebook to full width.\n */\nconst fullWidthNotebook = {\n    id: '@jupyter-notebook/notebook-extension:full-width-notebook',\n    description: 'A plugin to set the notebook to full width.',\n    autoStart: true,\n    requires: [INotebookTracker],\n    optional: [ICommandPalette, ISettingRegistry, ITranslator],\n    activate: (app, tracker, palette, settingRegistry, translator) => {\n        const trans = (translator !== null && translator !== void 0 ? translator : nullTranslator).load('notebook');\n        let fullWidth = false;\n        const toggleFullWidth = () => {\n            const current = tracker.currentWidget;\n            fullWidth = !fullWidth;\n            if (!current) {\n                return;\n            }\n            const content = current;\n            content.toggleClass(FULL_WIDTH_NOTEBOOK_CLASS, fullWidth);\n        };\n        let notebookSettings;\n        if (settingRegistry) {\n            const loadSettings = settingRegistry.load(fullWidthNotebook.id);\n            const updateSettings = (settings) => {\n                const newFullWidth = settings.get('fullWidthNotebook')\n                    .composite;\n                if (newFullWidth !== fullWidth) {\n                    toggleFullWidth();\n                }\n            };\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                notebookSettings = settings;\n                updateSettings(settings);\n                settings.changed.connect((settings) => {\n                    updateSettings(settings);\n                });\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n        app.commands.addCommand(CommandIDs.toggleFullWidth, {\n            label: trans.__('Enable Full Width Notebook'),\n            execute: () => {\n                toggleFullWidth();\n                if (notebookSettings) {\n                    notebookSettings.set('fullWidthNotebook', fullWidth);\n                }\n            },\n            isEnabled: () => tracker.currentWidget !== null,\n            isToggled: () => fullWidth,\n        });\n        if (palette) {\n            palette.addItem({\n                command: CommandIDs.toggleFullWidth,\n                category: 'Notebook Operations',\n            });\n        }\n    },\n};\n/**\n * The kernel logo plugin.\n */\nconst kernelLogo = {\n    id: '@jupyter-notebook/notebook-extension:kernel-logo',\n    description: 'The kernel logo plugin.',\n    autoStart: true,\n    requires: [INotebookShell],\n    optional: [IToolbarWidgetRegistry],\n    activate: (app, shell, toolbarRegistry) => {\n        const { serviceManager } = app;\n        const node = document.createElement('div');\n        const img = document.createElement('img');\n        const onChange = async () => {\n            var _a, _b, _c, _d, _e;\n            const current = shell.currentWidget;\n            if (!(current instanceof NotebookPanel)) {\n                return;\n            }\n            if (!node.hasChildNodes()) {\n                node.appendChild(img);\n            }\n            await current.sessionContext.ready;\n            current.sessionContext.kernelChanged.disconnect(onChange);\n            current.sessionContext.kernelChanged.connect(onChange);\n            const name = (_c = (_b = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : '';\n            const spec = (_e = (_d = serviceManager.kernelspecs) === null || _d === void 0 ? void 0 : _d.specs) === null || _e === void 0 ? void 0 : _e.kernelspecs[name];\n            if (!spec) {\n                node.childNodes[0].remove();\n                return;\n            }\n            const kernelIconUrl = spec.resources['logo-64x64'];\n            if (!kernelIconUrl) {\n                node.childNodes[0].remove();\n                return;\n            }\n            img.src = kernelIconUrl;\n            img.title = spec.display_name;\n        };\n        if (toolbarRegistry) {\n            toolbarRegistry.addFactory('TopBar', 'kernelLogo', (toolbar) => {\n                const widget = new Widget({ node });\n                widget.addClass('jp-NotebookKernelLogo');\n                return widget;\n            });\n        }\n        app.started.then(() => {\n            shell.currentChanged.connect(onChange);\n        });\n    },\n};\n/**\n * A plugin to display the kernel status;\n */\nconst kernelStatus = {\n    id: '@jupyter-notebook/notebook-extension:kernel-status',\n    description: 'A plugin to display the kernel status.',\n    autoStart: true,\n    requires: [INotebookShell, ITranslator],\n    activate: (app, shell, translator) => {\n        const trans = translator.load('notebook');\n        const widget = new Widget();\n        widget.addClass('jp-NotebookKernelStatus');\n        app.shell.add(widget, 'menu', { rank: 10010 });\n        const removeClasses = () => {\n            widget.removeClass(KERNEL_STATUS_ERROR_CLASS);\n            widget.removeClass(KERNEL_STATUS_WARN_CLASS);\n            widget.removeClass(KERNEL_STATUS_INFO_CLASS);\n            widget.removeClass(KERNEL_STATUS_FADE_OUT_CLASS);\n        };\n        const onStatusChanged = (sessionContext) => {\n            const status = sessionContext.kernelDisplayStatus;\n            let text = `Kernel ${Text.titleCase(status)}`;\n            removeClasses();\n            switch (status) {\n                case 'busy':\n                case 'idle':\n                    text = '';\n                    widget.addClass(KERNEL_STATUS_FADE_OUT_CLASS);\n                    break;\n                case 'dead':\n                case 'terminating':\n                    widget.addClass(KERNEL_STATUS_ERROR_CLASS);\n                    break;\n                case 'unknown':\n                    widget.addClass(KERNEL_STATUS_WARN_CLASS);\n                    break;\n                default:\n                    widget.addClass(KERNEL_STATUS_INFO_CLASS);\n                    widget.addClass(KERNEL_STATUS_FADE_OUT_CLASS);\n                    break;\n            }\n            widget.node.textContent = trans.__(text);\n        };\n        const onChange = async () => {\n            const current = shell.currentWidget;\n            if (!(current instanceof NotebookPanel)) {\n                return;\n            }\n            const sessionContext = current.sessionContext;\n            sessionContext.statusChanged.connect(onStatusChanged);\n        };\n        shell.currentChanged.connect(onChange);\n    },\n};\n/**\n * A plugin to enable scrolling for outputs by default.\n * Mimic the logic from the classic notebook, as found here:\n * https://github.com/jupyter/notebook/blob/a9a31c096eeffe1bff4e9164c6a0442e0e13cdb3/notebook/static/notebook/js/outputarea.js#L96-L120\n */\nconst scrollOutput = {\n    id: '@jupyter-notebook/notebook-extension:scroll-output',\n    description: 'A plugin to enable scrolling for outputs by default.',\n    autoStart: true,\n    requires: [INotebookTracker],\n    optional: [ISettingRegistry],\n    activate: async (app, tracker, settingRegistry) => {\n        const autoScrollThreshold = 100;\n        let autoScrollOutputs = true;\n        // decide whether to scroll the output of the cell based on some heuristics\n        const autoScroll = (cell) => {\n            if (!autoScrollOutputs) {\n                // bail if disabled via the settings\n                cell.removeClass(SCROLLED_OUTPUTS_CLASS);\n                return;\n            }\n            const { outputArea } = cell;\n            // respect cells with an explicit scrolled state\n            const scrolled = cell.model.getMetadata('scrolled');\n            if (scrolled !== undefined) {\n                return;\n            }\n            const { node } = outputArea;\n            const height = node.scrollHeight;\n            const fontSize = parseFloat(node.style.fontSize.replace('px', ''));\n            const lineHeight = (fontSize || 14) * 1.3;\n            // do not set via cell.outputScrolled = true, as this would\n            // otherwise synchronize the scrolled state to the notebook metadata\n            const scroll = height > lineHeight * autoScrollThreshold;\n            cell.toggleClass(SCROLLED_OUTPUTS_CLASS, scroll);\n        };\n        const handlers = {};\n        const setAutoScroll = (cell) => {\n            if (cell.model.type === 'code') {\n                const codeCell = cell;\n                const id = codeCell.model.id;\n                autoScroll(codeCell);\n                if (handlers[id]) {\n                    codeCell.outputArea.model.changed.disconnect(handlers[id]);\n                }\n                handlers[id] = () => autoScroll(codeCell);\n                codeCell.outputArea.model.changed.connect(handlers[id]);\n            }\n        };\n        tracker.widgetAdded.connect((sender, notebook) => {\n            var _a;\n            // when the notebook widget is created, process all the cells\n            notebook.sessionContext.ready.then(() => {\n                notebook.content.widgets.forEach(setAutoScroll);\n            });\n            (_a = notebook.model) === null || _a === void 0 ? void 0 : _a.cells.changed.connect((sender, args) => {\n                notebook.content.widgets.forEach(setAutoScroll);\n            });\n        });\n        if (settingRegistry) {\n            const loadSettings = settingRegistry.load(scrollOutput.id);\n            const updateSettings = (settings) => {\n                autoScrollOutputs = settings.get('autoScrollOutputs')\n                    .composite;\n            };\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                updateSettings(settings);\n                settings.changed.connect((settings) => {\n                    updateSettings(settings);\n                });\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n    },\n};\n/**\n * A plugin to add the NotebookTools to the side panel;\n */\nconst notebookToolsWidget = {\n    id: '@jupyter-notebook/notebook-extension:notebook-tools',\n    description: 'A plugin to add the NotebookTools to the side panel.',\n    autoStart: true,\n    requires: [INotebookShell],\n    optional: [INotebookTools],\n    activate: (app, shell, notebookTools) => {\n        const onChange = async () => {\n            const current = shell.currentWidget;\n            if (!(current instanceof NotebookPanel)) {\n                return;\n            }\n            // Add the notebook tools in right area.\n            if (notebookTools) {\n                shell.add(notebookTools, 'right', { type: 'Property Inspector' });\n            }\n        };\n        shell.currentChanged.connect(onChange);\n    },\n};\n/**\n * A plugin to update the tab icon based on the kernel status.\n */\nconst tabIcon = {\n    id: '@jupyter-notebook/notebook-extension:tab-icon',\n    description: 'A plugin to update the tab icon based on the kernel status.',\n    autoStart: true,\n    requires: [INotebookTracker],\n    activate: (app, tracker) => {\n        // the favicons are provided by Jupyter Server\n        const baseURL = PageConfig.getBaseUrl();\n        const notebookIcon = URLExt.join(baseURL, 'static/favicons/favicon-notebook.ico');\n        const busyIcon = URLExt.join(baseURL, 'static/favicons/favicon-busy-1.ico');\n        const updateBrowserFavicon = (status) => {\n            const link = document.querySelector(\"link[rel*='icon']\");\n            switch (status) {\n                case 'busy':\n                    link.href = busyIcon;\n                    break;\n                case 'idle':\n                    link.href = notebookIcon;\n                    break;\n            }\n        };\n        const onChange = async () => {\n            const current = tracker.currentWidget;\n            const sessionContext = current === null || current === void 0 ? void 0 : current.sessionContext;\n            if (!sessionContext) {\n                return;\n            }\n            sessionContext.statusChanged.connect(() => {\n                const status = sessionContext.kernelDisplayStatus;\n                updateBrowserFavicon(status);\n            });\n        };\n        tracker.currentChanged.connect(onChange);\n    },\n};\n/**\n * A plugin that adds a Trusted indicator to the menu area\n */\nconst trusted = {\n    id: '@jupyter-notebook/notebook-extension:trusted',\n    description: 'A plugin that adds a Trusted indicator to the menu area.',\n    autoStart: true,\n    requires: [INotebookShell, ITranslator],\n    activate: (app, notebookShell, translator) => {\n        const onChange = async () => {\n            const current = notebookShell.currentWidget;\n            if (!(current instanceof NotebookPanel)) {\n                return;\n            }\n            const notebook = current.content;\n            await current.context.ready;\n            const widget = TrustedComponent.create({ notebook, translator });\n            notebookShell.add(widget, 'menu', {\n                rank: 11000,\n            });\n        };\n        notebookShell.currentChanged.connect(onChange);\n    },\n};\n/**\n * Add a command to open right sidebar for Editing Notebook Metadata when clicking on \"Edit Notebook Metadata\" under Edit menu\n */\nconst editNotebookMetadata = {\n    id: '@jupyter-notebook/notebook-extension:edit-notebook-metadata',\n    description: 'Add a command to open right sidebar for Editing Notebook Metadata when clicking on \"Edit Notebook Metadata\" under Edit menu',\n    autoStart: true,\n    optional: [ICommandPalette, ITranslator, INotebookTools],\n    activate: (app, palette, translator, notebookTools) => {\n        const { commands, shell } = app;\n        translator = translator !== null && translator !== void 0 ? translator : nullTranslator;\n        const trans = translator.load('notebook');\n        commands.addCommand(CommandIDs.openEditNotebookMetadata, {\n            label: trans.__('Edit Notebook Metadata'),\n            execute: async () => {\n                const command = 'application:toggle-panel';\n                const args = {\n                    side: 'right',\n                    title: 'Show Notebook Tools',\n                    id: 'notebook-tools',\n                };\n                // Check if Show Notebook Tools (Right Sidebar) is open (expanded)\n                if (!commands.isToggled(command, args)) {\n                    await commands.execute(command, args).then((_) => {\n                        // For expanding the 'Advanced Tools' section (default: collapsed)\n                        if (notebookTools) {\n                            const tools = (notebookTools === null || notebookTools === void 0 ? void 0 : notebookTools.layout).widgets;\n                            tools.forEach((tool) => {\n                                if (tool.widget.title.label === trans.__('Advanced Tools') &&\n                                    tool.collapsed) {\n                                    tool.toggle();\n                                }\n                            });\n                        }\n                    });\n                }\n            },\n            isVisible: () => shell.currentWidget !== null &&\n                shell.currentWidget instanceof NotebookPanel,\n        });\n        if (palette) {\n            palette.addItem({\n                command: CommandIDs.openEditNotebookMetadata,\n                category: 'Notebook Operations',\n            });\n        }\n    },\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    checkpoints,\n    closeTab,\n    openTreeTab,\n    editNotebookMetadata,\n    fullWidthNotebook,\n    kernelLogo,\n    kernelStatus,\n    notebookToolsWidget,\n    scrollOutput,\n    tabIcon,\n    trusted,\n];\nexport default plugins;\n"],"names":["isTrusted","notebook","model","cells","Array","from","total","trusted","currentCell","type","TrustedButton","translator","trans","load","setTrusted","useState","checkTrust","v","useEffect","modelContentChanged","connect","activeCellChanged","disconnect","className","style","cursor","onClick","async","NotebookActions","trust","title","__","TrustedComponent","create","ReactWidget","KERNEL_STATUS_ERROR_CLASS","KERNEL_STATUS_WARN_CLASS","KERNEL_STATUS_INFO_CLASS","KERNEL_STATUS_FADE_OUT_CLASS","SCROLLED_OUTPUTS_CLASS","CommandIDs","openEditNotebookMetadata","toggleFullWidth","checkpoints","id","description","autoStart","requires","IDocumentManager","ITranslator","optional","INotebookShell","IToolbarWidgetRegistry","ISettingRegistry","activate","app","docManager","notebookShell","toolbarRegistry","settingRegistry","shell","node","document","createElement","addFactory","toolbar","widget","Widget","DOMUtils","createDomID","addClass","getCurrent","current","currentWidget","contextForWidget","updateCheckpointDisplay","listCheckpoints","length","textContent","checkpoint","Time","formatHuman","Date","last_modified","onSaveState","sender","state","setTimeout","currentChanged","context","saveState","checkpointPollingInterval","poll","createPoll","dispose","Poll","auto","factory","frequency","interval","backoff","standby","updateSettings","settings","get","composite","loadSettings","Promise","all","restored","then","changed","catch","reason","console","error","message","closeTab","IMainMenu","menu","commands","nullTranslator","addCommand","label","execute","window","close","fileMenu","closeAndCleaners","add","rank","openTreeTab","url","URLExt","join","PageConfig","getBaseUrl","open","fullWidthNotebook","INotebookTracker","ICommandPalette","tracker","palette","fullWidth","toggleClass","notebookSettings","set","isEnabled","isToggled","addItem","command","category","kernelLogo","serviceManager","img","onChange","_a","_b","_c","_d","_e","NotebookPanel","hasChildNodes","appendChild","sessionContext","ready","kernelChanged","name","session","kernel","spec","kernelspecs","specs","childNodes","remove","kernelIconUrl","resources","src","display_name","started","kernelStatus","onStatusChanged","status","kernelDisplayStatus","text","Text","titleCase","removeClass","statusChanged","scrollOutput","autoScrollOutputs","autoScroll","cell","outputArea","undefined","getMetadata","scroll","scrollHeight","parseFloat","fontSize","replace","handlers","setAutoScroll","codeCell","widgetAdded","content","widgets","forEach","args","notebookToolsWidget","INotebookTools","notebookTools","tabIcon","baseURL","notebookIcon","busyIcon","link","querySelector","href","updateBrowserFavicon","editNotebookMetadata","side","_","layout","tool","collapsed","toggle","isVisible"],"sourceRoot":""}