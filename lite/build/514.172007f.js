"use strict";(self.webpackChunk_JUPYTERLAB_CORE_OUTPUT=self.webpackChunk_JUPYTERLAB_CORE_OUTPUT||[]).push([[514,9866],{30514:(e,t,o)=>{o.r(t),o.d(t,{default:()=>C});var n=o(10498),i=o(14286),r=o(77015),a=o(10378),s=o(53373),d=o(68793),l=o(41719),c=o(25175),g=o(60920),u=o(85750),w=o(77626),b=o.n(w);class h{constructor(e){this._onSelectionChanged=()=>{var e,t,o,n,i,r;const a=Array.from(this._browser.selectedItems()),s=a.length>0,d=a.some((e=>"directory"===e.type));null===(e=this._widgets.get("placeholder"))||void 0===e||e.setHidden(s),null===(t=this._widgets.get("delete"))||void 0===t||t.setHidden(!s),null===(o=this._widgets.get("duplicate"))||void 0===o||o.setHidden(!s||d),null===(n=this._widgets.get("download"))||void 0===n||n.setHidden(!s||d),null===(i=this._widgets.get("open"))||void 0===i||i.setHidden(!s||d),null===(r=this._widgets.get("rename"))||void 0===r||r.setHidden(1!==a.length)},this._widgets=new Map,this._browser=e.browser;const{commands:t,selectionChanged:o,translator:i}=e,r=i.load("notebook"),a=n.ReactWidget.create(b().createElement("div",{key:"placeholder"},r.__("Select items to perform actions on them.")));a.id="fileAction-placeholder",this._widgets.set("placeholder",a),["open","download","rename","duplicate","delete"].forEach((e=>{const o=n.ReactWidget.create(b().createElement(n.CommandToolbarButtonComponent,{key:e,commands:t,id:`filebrowser:${e}`,args:{toolbar:!0},icon:void 0}));o.id=`fileAction-${e}`,o.addClass("jp-ToolbarButton"),o.addClass("jp-FileAction"),this._widgets.set(e,o)})),o.connect(this._onSelectionChanged,this),this._onSelectionChanged()}get widgets(){return this._widgets.values()}}const p="FileBrowser";var f;!function(e){e.activate="filebrowser:activate",e.toggleFileFilter="filebrowser:toggle-file-filter"}(f||(f={}));const m={id:"@jupyter-notebook/tree-extension:new",description:"Plugin to add extra commands to the file browser to create new notebooks, files, consoles and terminals.",requires:[l.ITranslator],optional:[n.IToolbarWidgetRegistry],autoStart:!0,activate:(e,t,o)=>{var n;const{commands:i,serviceManager:r}=e,a=t.load("notebook"),s={overflowMenuOptions:{isVisible:!1}},d=new g.MenuBar(s),l=new g.Menu({commands:i});l.title.label=a.__("New"),l.title.icon=c.caretDownIcon,d.addMenu(l);const u=()=>{var e,t;const o=null===(t=null===(e=r.kernelspecs)||void 0===e?void 0:e.specs)||void 0===t?void 0:t.kernelspecs;for(const e in o)l.addItem({args:{kernelName:e,isLauncher:!0},command:"notebook:create-new"});["terminal:create-new","console:create","filebrowser:create-new-file","filebrowser:create-new-directory"].forEach((e=>{l.addItem({command:e})}))};null===(n=r.kernelspecs)||void 0===n||n.specsChanged.connect((()=>{l.clearItems(),u()})),u(),o&&o.addFactory(p,"new-dropdown",(e=>{const t=new g.MenuBar(s);return t.addMenu(l),t.addClass("jp-DropdownMenu"),t}))}},v={id:"@jupyter-notebook/tree-extension:file-actions",description:"A plugin to add file browser actions to the file browser toolbar.",autoStart:!0,requires:[r.IDefaultFileBrowser,n.IToolbarWidgetRegistry,l.ITranslator],activate:(e,t,o,n)=>{const{commands:i}=e,{selectionChanged:r}=t,a=new h({commands:i,browser:t,selectionChanged:r,translator:n});for(const e of a.widgets)o.addFactory(p,e.id,(()=>e))}},k={id:"@jupyter-notebook/tree-extension:settings",description:"Set up the default file browser settings",requires:[r.IDefaultFileBrowser],optional:[a.ISettingRegistry],autoStart:!0,activate:(e,t,o)=>{const n={navigateToCurrentDirectory:!1,singleClickNavigation:!0,showLastModifiedColumn:!0,showFileSizeColumn:!0,showHiddenFiles:!1,showFileCheckboxes:!0,sortNotebooksFirst:!0,showFullPath:!1};let i;for(i in n)t[i]=n[i];o&&o.load("@jupyterlab/filebrowser-extension:browser").then((e=>{function o(e){let o;for(o in n){const n=e.get(o).user;void 0!==n&&(t[o]=n)}}e.changed.connect(o),o(e)}))}},y={id:"@jupyter-notebook/tree-extension:file-filter-command",description:"A plugin to add file filter command to the palette.",autoStart:!0,optional:[n.ICommandPalette],activate:(e,t)=>{t&&t.addItem({command:f.toggleFileFilter,category:"File Browser"})}},_={id:"@jupyter-notebook/tree-extension:load-plugins",description:"Plugin to load the default plugins that are loaded on all the Notebook pages (tree, edit, view, etc.) so they are visible in the settings editor.",autoStart:!0,requires:[a.ISettingRegistry],activate(e,t){const{isDisabled:o}=i.PageConfig.Extension,n=t.connector,r=i.PageConfig.getOption("allPlugins");if(!r)return;const a=JSON.parse(r),s=new Set;Object.keys(a).forEach((e=>{const t=a[e];Object.keys(t).forEach((e=>{const o=t[e];"boolean"==typeof o&&o?s.add(e):Array.isArray(o)&&o.forEach((e=>{s.add(e)}))}))})),e.restored.then((async()=>{(await n.list("all")).ids.forEach((async e=>{const[n]=e.split(":");if((s.has(n)||s.has(e))&&!o(e)&&!(e in t.plugins))try{await t.load(e)}catch(t){console.warn(`Settings failed to load for (${e})`,t)}}))}))}},I={id:"@jupyter-notebook/tree-extension:open-file-browser",description:"A plugin to add file browser commands for the tree view.",requires:[u.INotebookTree,r.IDefaultFileBrowser],autoStart:!0,activate:(e,t,o)=>{const{commands:n}=e;n.addCommand(f.activate,{execute:()=>{t.currentWidget=o}})}},S={id:"@jupyter-notebook/tree-extension:widget",description:"A plugin to add the file browser widget to an INotebookShell.",requires:[r.IDefaultFileBrowser,l.ITranslator,a.ISettingRegistry,n.IToolbarWidgetRegistry,r.IFileBrowserFactory],optional:[s.IRunningSessionManagers,d.ISettingEditorTracker,d.IJSONSettingEditorTracker],autoStart:!0,provides:u.INotebookTree,activate:(e,t,o,i,a,d,l,g,w)=>{const b=new u.NotebookTreeWidget,h=o.load("notebook");if(t.title.label=h.__("Files"),t.node.setAttribute("role","region"),t.node.setAttribute("aria-label",h.__("File Browser Section")),t.title.icon=c.folderIcon,b.addWidget(t),b.tabBar.addTab(t.title),b.tabsMovable=!1,a.addFactory(p,"uploader",(e=>new r.Uploader({model:e.model,translator:o,label:h.__("Upload")}))),(0,n.setToolbar)(t,(0,n.createToolbarFactory)(a,i,p,S.id,o)),l){const e=new s.RunningSessions(l,o);e.id="jp-running-sessions-tree",e.title.label=h.__("Running"),e.title.icon=c.runningIcon,b.addWidget(e),b.tabBar.addTab(e.title)}e.shell.add(b,"main",{rank:100}),[g,w].forEach((e=>{e&&e.widgetAdded.connect(((e,t)=>{b.addWidget(t),b.tabBar.addTab(t.title),b.currentWidget=t}))}));const{tracker:f}=d,m=()=>{f._pool.current=t};return f.widgetAdded.connect(((e,t)=>{m()})),m(),b}},C=[m,v,k,y,_,I,S]}}]);
//# sourceMappingURL=514.172007f.js.map