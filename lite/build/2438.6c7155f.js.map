{"version":3,"file":"2438.6c7155f.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application/lib/router.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application/lib/singleWidgetShell.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application/lib/singleWidgetApp.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Router } from '@jupyterlab/application';\nimport { Token } from '@lumino/coreutils';\n/**\n * A token for the ILiteRouter interface\n */\nexport const ILiteRouter = new Token('@jupyterlite/application:ILiteRouter');\n/**\n * A custom router that extends the standard Router with URL transformation capabilities\n */\nexport class LiteRouter extends Router {\n    constructor(options) {\n        super(options);\n        this._transformers = [];\n        this._transformers = [];\n    }\n    /**\n     * Add a URL transformer\n     */\n    addTransformer(transformer) {\n        this._transformers.push(transformer);\n    }\n    /**\n     * Navigate to a new path within the application.\n     */\n    navigate(url, options = {}) {\n        const urlObj = new URL(url, window.location.href);\n        // Apply all transformers\n        let transformedUrl = urlObj;\n        let transformedOptions = options;\n        for (const transformer of this._transformers) {\n            const result = transformer.transform({\n                url: transformedUrl,\n                options: transformedOptions,\n            });\n            transformedUrl = result.url;\n            transformedOptions = result.options;\n        }\n        // Call the parent navigate method with transformed values\n        super.navigate(transformedUrl.pathname + transformedUrl.search + transformedUrl.hash, transformedOptions);\n    }\n}\n//# sourceMappingURL=router.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { find } from '@lumino/algorithm';\nimport { Token } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { Panel, Widget, PanelLayout } from '@lumino/widgets';\n/**\n * The single widget application shell token.\n */\nexport const ISingleWidgetShell = new Token('@jupyterlite/application:ISingleWidgetShell');\n/**\n * The application shell.\n */\nexport class SingleWidgetShell extends Widget {\n    constructor() {\n        super();\n        this._currentChanged = new Signal(this);\n        this.id = 'main';\n        const rootLayout = new PanelLayout();\n        this._main = new Panel();\n        this._main.id = 'single-widget-panel';\n        rootLayout.addWidget(this._main);\n        this.layout = rootLayout;\n    }\n    /**\n     * A signal emitted when the current widget changes.\n     */\n    get currentChanged() {\n        return this._currentChanged;\n    }\n    /**\n     * The current widget in the shell's main area.\n     */\n    get currentWidget() {\n        var _a;\n        return (_a = this._main.widgets[0]) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Activate a widget in its area.\n     */\n    activateById(id) {\n        const widget = find(this.widgets('main'), (w) => w.id === id);\n        if (widget) {\n            widget.activate();\n        }\n    }\n    /**\n     * Add a widget to the application shell.\n     *\n     * @param widget - The widget being added.\n     *\n     * @param area - Optional region in the shell into which the widget should\n     * be added.\n     *\n     * @param options - Optional open options.\n     *\n     */\n    add(widget, area, options) {\n        if (area === 'main' || area === undefined) {\n            if (this._main.widgets.length > 0) {\n                // do not add the widget if there is already one\n                return;\n            }\n            const previousWidget = this.currentWidget;\n            this._main.addWidget(widget);\n            this._main.update();\n            this._currentChanged.emit({\n                newValue: widget,\n                oldValue: previousWidget,\n            });\n        }\n    }\n    /**\n     * Return the list of widgets for the given area.\n     *\n     * @param area The area\n     */\n    *widgets(area) {\n        switch (area !== null && area !== void 0 ? area : 'main') {\n            case 'main':\n                yield* this._main.widgets;\n                break;\n            default:\n                throw new Error(`Invalid area: ${area}`);\n        }\n    }\n}\n//# sourceMappingURL=singleWidgetShell.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { JupyterFrontEnd } from '@jupyterlab/application';\nimport { createRendermimePlugins } from '@jupyterlab/application/lib/mimerenderers';\nimport { LabStatus } from '@jupyterlab/application/lib/status';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { SingleWidgetShell } from './singleWidgetShell';\n/**\n * App is the main application class. It is instantiated once and shared.\n */\nexport class SingleWidgetApp extends JupyterFrontEnd {\n    /**\n     * Construct a new SingleWidgetApp object.\n     *\n     * @param options The instantiation options for an application.\n     */\n    constructor(options = { shell: new SingleWidgetShell() }) {\n        var _a, _b;\n        super({\n            ...options,\n            shell: (_a = options.shell) !== null && _a !== void 0 ? _a : new SingleWidgetShell(),\n        });\n        /**\n         * The name of the application.\n         */\n        this.name = 'Single Widget Application';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = this.name;\n        /**\n         * The application busy and dirty status signals and flags.\n         */\n        this.status = new LabStatus(this);\n        /**\n         * The version of the application.\n         */\n        this.version = (_b = PageConfig.getOption('appVersion')) !== null && _b !== void 0 ? _b : 'unknown';\n        if (options.mimeExtensions) {\n            for (const plugin of createRendermimePlugins(options.mimeExtensions)) {\n                this.registerPlugin(plugin);\n            }\n        }\n    }\n    /**\n     * The JupyterLab application paths dictionary.\n     */\n    get paths() {\n        return {\n            urls: {\n                base: PageConfig.getOption('baseUrl'),\n                notFound: PageConfig.getOption('notFoundUrl'),\n                app: PageConfig.getOption('appUrl'),\n                static: PageConfig.getOption('staticUrl'),\n                settings: PageConfig.getOption('settingsUrl'),\n                themes: PageConfig.getOption('themesUrl'),\n                doc: PageConfig.getOption('docUrl'),\n                translations: PageConfig.getOption('translationsApiUrl'),\n                hubHost: PageConfig.getOption('hubHost') || undefined,\n                hubPrefix: PageConfig.getOption('hubPrefix') || undefined,\n                hubUser: PageConfig.getOption('hubUser') || undefined,\n                hubServerName: PageConfig.getOption('hubServerName') || undefined,\n            },\n            directories: {\n                appSettings: PageConfig.getOption('appSettingsDir'),\n                schemas: PageConfig.getOption('schemasDir'),\n                static: PageConfig.getOption('staticDir'),\n                templates: PageConfig.getOption('templatesDir'),\n                themes: PageConfig.getOption('themesDir'),\n                userSettings: PageConfig.getOption('userSettingsDir'),\n                serverRoot: PageConfig.getOption('serverRoot'),\n                workspaces: PageConfig.getOption('workspacesDir'),\n            },\n        };\n    }\n}\n//# sourceMappingURL=singleWidgetApp.js.map"],"names":["ILiteRouter","Token","LiteRouter","Router","constructor","options","super","this","_transformers","addTransformer","transformer","push","navigate","url","transformedUrl","URL","window","location","href","transformedOptions","result","transform","pathname","search","hash","ISingleWidgetShell","SingleWidgetShell","Widget","_currentChanged","Signal","id","rootLayout","PanelLayout","_main","Panel","addWidget","layout","currentChanged","currentWidget","_a","widgets","activateById","widget","find","w","activate","add","area","undefined","length","previousWidget","update","emit","newValue","oldValue","Error","SingleWidgetApp","JupyterFrontEnd","shell","_b","name","namespace","status","version","PageConfig","getOption","mimeExtensions","plugin","registerPlugin","paths","urls","base","notFound","app","static","settings","themes","doc","translations","hubHost","hubPrefix","hubUser","hubServerName","directories","appSettings","schemas","templates","userSettings","serverRoot","workspaces"],"sourceRoot":""}