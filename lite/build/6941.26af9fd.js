"use strict";(self.webpackChunk_JUPYTERLAB_CORE_OUTPUT=self.webpackChunk_JUPYTERLAB_CORE_OUTPUT||[]).push([[6941],{56941:(e,t,o)=>{o.r(t),o.d(t,{default:()=>R});var n=o(10498),a=o(14286),s=o(71574),l=o(68147),r=o(45368),i=o(10378),c=o(41719),d=o(93684),u=o(77664),k=o(60920),b=o(77626),g=o.n(b);const p=e=>{const t=e.model;if(!t)return!1;const o=Array.from(t.cells);let n=0,a=0;for(const e of o)"code"===e.type&&(n++,e.trusted&&a++);return a===n},h=({notebook:e,translator:t})=>{const o=t.load("notebook"),[n,a]=(0,b.useState)(p(e)),s=()=>{const t=p(e);a(t)};return(0,b.useEffect)((()=>(e.modelContentChanged.connect(s),e.activeCellChanged.connect(s),s(),()=>{e.modelContentChanged.disconnect(s),e.activeCellChanged.disconnect(s)}))),g().createElement("button",{className:"jp-NotebookTrustedStatus",style:n?{cursor:"help"}:{cursor:"pointer"},onClick:()=>!n&&(async()=>{await r.NotebookActions.trust(e,t),s()})(),title:n?o.__("JavaScript enabled for notebook display"):o.__("JavaScript disabled for notebook display")},n?o.__("Trusted"):o.__("Not Trusted"))};var m;!function(e){e.create=({notebook:e,translator:t})=>n.ReactWidget.create(g().createElement(h,{notebook:e,translator:t}))}(m||(m={}));const C="jp-NotebookKernelStatus-error",f="jp-NotebookKernelStatus-warn",y="jp-NotebookKernelStatus-info",v="jp-NotebookKernelStatus-fade",N="jp-mod-outputsScrolled";var w;!function(e){e.openEditNotebookMetadata="notebook:edit-metadata",e.toggleFullWidth="notebook:toggle-full-width"}(w||(w={}));const S={id:"@jupyter-notebook/notebook-extension:checkpoints",description:"A plugin for the checkpoint indicator.",autoStart:!0,requires:[s.IDocumentManager,c.ITranslator],optional:[d.INotebookShell,n.IToolbarWidgetRegistry,i.ISettingRegistry],activate:(e,t,o,s,l,r)=>{const{shell:i}=e,c=o.load("notebook"),d=document.createElement("div");l&&l.addFactory("TopBar","checkpoint",(e=>{const t=new k.Widget({node:d});return t.id=n.DOMUtils.createDomID(),t.addClass("jp-NotebookCheckpoint"),t}));const b=()=>{const e=i.currentWidget;if(!e)return null;return t.contextForWidget(e)||null},g=async()=>{const e=b();if(!e)return;const t=await e.listCheckpoints();if(!t||!t.length)return void(d.textContent="");const o=t[t.length-1];d.textContent=c.__("Last Checkpoint: %1",a.Time.formatHuman(new Date(o.last_modified)))},p=async(e,t)=>{"completed"===t&&setTimeout((()=>{g()}),500)};s&&s.currentChanged.connect((async()=>{const e=b();e&&(e.saveState.disconnect(p),e.saveState.connect(p),await g())}));let h=30,m=null;const C=()=>{m&&m.dispose(),h>0&&(m=new u.Poll({auto:!0,factory:()=>g(),frequency:{interval:1e3*h,backoff:!1},standby:"when-hidden"}))},f=e=>{h=e.get("checkpointPollingInterval").composite,C()};if(r){const t=r.load(S.id);Promise.all([t,e.restored]).then((([e])=>{f(e),e.changed.connect(f)})).catch((e=>{console.error(`Failed to load settings for ${S.id}: ${e.message}`),C()}))}else C()}},T={id:"@jupyter-notebook/notebook-extension:close-tab",description:'Add a command to close the browser tab when clicking on "Close and Shut Down".',autoStart:!0,requires:[l.IMainMenu],optional:[c.ITranslator],activate:(e,t,o)=>{const{commands:n}=e,a=(o=null!=o?o:c.nullTranslator).load("notebook"),s="notebook:close-and-halt";n.addCommand(s,{label:a.__("Close and Shut Down Notebook"),execute:async()=>{await n.execute("notebook:shutdown-kernel",{activate:!1}),window.close()}}),t.fileMenu.closeAndCleaners.add({id:s,rank:0})}},x={id:"@jupyter-notebook/notebook-extension:open-tree-tab",description:'Add a command to open a browser tab on the tree view when clicking "Open...".',autoStart:!0,optional:[c.ITranslator],activate:(e,t)=>{const{commands:o}=e,n=(t=null!=t?t:c.nullTranslator).load("notebook");o.addCommand("notebook:open-tree-tab",{label:n.__("Openâ€¦"),execute:async()=>{const e=a.URLExt.join(a.PageConfig.getBaseUrl(),"tree");window.open(e)}})}},I={id:"@jupyter-notebook/notebook-extension:full-width-notebook",description:"A plugin to set the notebook to full width.",autoStart:!0,requires:[r.INotebookTracker],optional:[n.ICommandPalette,i.ISettingRegistry,c.ITranslator],activate:(e,t,o,n,a)=>{const s=(null!=a?a:c.nullTranslator).load("notebook");let l=!1;const r=()=>{const e=t.currentWidget;l=!l,e&&e.toggleClass("jp-mod-fullwidth",l)};let i;if(n){const t=n.load(I.id),o=e=>{e.get("fullWidthNotebook").composite!==l&&r()};Promise.all([t,e.restored]).then((([e])=>{i=e,o(e),e.changed.connect((e=>{o(e)}))})).catch((e=>{console.error(e.message)}))}e.commands.addCommand(w.toggleFullWidth,{label:s.__("Enable Full Width Notebook"),execute:()=>{r(),i&&i.set("fullWidthNotebook",l)},isEnabled:()=>null!==t.currentWidget,isToggled:()=>l}),o&&o.addItem({command:w.toggleFullWidth,category:"Notebook Operations"})}},_={id:"@jupyter-notebook/notebook-extension:kernel-logo",description:"The kernel logo plugin.",autoStart:!0,requires:[d.INotebookShell],optional:[n.IToolbarWidgetRegistry],activate:(e,t,o)=>{const{serviceManager:n}=e,a=document.createElement("div"),s=document.createElement("img"),l=async()=>{var e,o,i,c,d;const u=t.currentWidget;if(!(u instanceof r.NotebookPanel))return;a.hasChildNodes()||a.appendChild(s),await u.sessionContext.ready,u.sessionContext.kernelChanged.disconnect(l),u.sessionContext.kernelChanged.connect(l);const k=null!==(i=null===(o=null===(e=u.sessionContext.session)||void 0===e?void 0:e.kernel)||void 0===o?void 0:o.name)&&void 0!==i?i:"",b=null===(d=null===(c=n.kernelspecs)||void 0===c?void 0:c.specs)||void 0===d?void 0:d.kernelspecs[k];if(!b)return void a.childNodes[0].remove();const g=b.resources["logo-64x64"];g?(s.src=g,s.title=b.display_name):a.childNodes[0].remove()};o&&o.addFactory("TopBar","kernelLogo",(e=>{const t=new k.Widget({node:a});return t.addClass("jp-NotebookKernelLogo"),t})),e.started.then((()=>{t.currentChanged.connect(l)}))}},E={id:"@jupyter-notebook/notebook-extension:kernel-status",description:"A plugin to display the kernel status.",autoStart:!0,requires:[d.INotebookShell,c.ITranslator],activate:(e,t,o)=>{const n=o.load("notebook"),s=new k.Widget;s.addClass("jp-NotebookKernelStatus"),e.shell.add(s,"menu",{rank:10010});const l=e=>{const t=e.kernelDisplayStatus;let o=`Kernel ${a.Text.titleCase(t)}`;switch(s.removeClass(C),s.removeClass(f),s.removeClass(y),s.removeClass(v),t){case"busy":case"idle":o="",s.addClass(v);break;case"dead":case"terminating":s.addClass(C);break;case"unknown":s.addClass(f);break;default:s.addClass(y),s.addClass(v)}s.node.textContent=n.__(o)};t.currentChanged.connect((async()=>{const e=t.currentWidget;e instanceof r.NotebookPanel&&e.sessionContext.statusChanged.connect(l)}))}},j={id:"@jupyter-notebook/notebook-extension:scroll-output",description:"A plugin to enable scrolling for outputs by default.",autoStart:!0,requires:[r.INotebookTracker],optional:[i.ISettingRegistry],activate:async(e,t,o)=>{let n=!0;const a=e=>{if(!n)return void e.removeClass(N);const{outputArea:t}=e;if(void 0!==e.model.getMetadata("scrolled"))return;const{node:o}=t,a=o.scrollHeight>1.3*(parseFloat(o.style.fontSize.replace("px",""))||14)*100;e.toggleClass(N,a)},s={},l=e=>{if("code"===e.model.type){const t=e,o=t.model.id;a(t),s[o]&&t.outputArea.model.changed.disconnect(s[o]),s[o]=()=>a(t),t.outputArea.model.changed.connect(s[o])}};if(t.widgetAdded.connect(((e,t)=>{var o;t.sessionContext.ready.then((()=>{t.content.widgets.forEach(l)})),null===(o=t.model)||void 0===o||o.cells.changed.connect(((e,o)=>{t.content.widgets.forEach(l)}))})),o){const t=o.load(j.id),a=e=>{n=e.get("autoScrollOutputs").composite};Promise.all([t,e.restored]).then((([e])=>{a(e),e.changed.connect((e=>{a(e)}))})).catch((e=>{console.error(e.message)}))}}},W={id:"@jupyter-notebook/notebook-extension:notebook-tools",description:"A plugin to add the NotebookTools to the side panel.",autoStart:!0,requires:[d.INotebookShell],optional:[r.INotebookTools],activate:(e,t,o)=>{t.currentChanged.connect((async()=>{t.currentWidget instanceof r.NotebookPanel&&o&&t.add(o,"right",{type:"Property Inspector"})}))}},A={id:"@jupyter-notebook/notebook-extension:tab-icon",description:"A plugin to update the tab icon based on the kernel status.",autoStart:!0,requires:[r.INotebookTracker],activate:(e,t)=>{const o=a.PageConfig.getBaseUrl(),n=a.URLExt.join(o,"static/favicons/favicon-notebook.ico"),s=a.URLExt.join(o,"static/favicons/favicon-busy-1.ico");t.currentChanged.connect((async()=>{const e=t.currentWidget,o=null==e?void 0:e.sessionContext;o&&o.statusChanged.connect((()=>{(e=>{const t=document.querySelector("link[rel*='icon']");switch(e){case"busy":t.href=s;break;case"idle":t.href=n}})(o.kernelDisplayStatus)}))}))}},P={id:"@jupyter-notebook/notebook-extension:trusted",description:"A plugin that adds a Trusted indicator to the menu area.",autoStart:!0,requires:[d.INotebookShell,c.ITranslator],activate:(e,t,o)=>{t.currentChanged.connect((async()=>{const e=t.currentWidget;if(!(e instanceof r.NotebookPanel))return;const n=e.content;await e.context.ready;const a=m.create({notebook:n,translator:o});t.add(a,"menu",{rank:11e3})}))}},M={id:"@jupyter-notebook/notebook-extension:edit-notebook-metadata",description:'Add a command to open right sidebar for Editing Notebook Metadata when clicking on "Edit Notebook Metadata" under Edit menu',autoStart:!0,optional:[n.ICommandPalette,c.ITranslator,r.INotebookTools],activate:(e,t,o,n)=>{const{commands:a,shell:s}=e,l=(o=null!=o?o:c.nullTranslator).load("notebook");a.addCommand(w.openEditNotebookMetadata,{label:l.__("Edit Notebook Metadata"),execute:async()=>{const e="application:toggle-panel",t={side:"right",title:"Show Notebook Tools",id:"notebook-tools"};a.isToggled(e,t)||await a.execute(e,t).then((e=>{n&&(null==n?void 0:n.layout).widgets.forEach((e=>{e.widget.title.label===l.__("Advanced Tools")&&e.collapsed&&e.toggle()}))}))},isVisible:()=>null!==s.currentWidget&&s.currentWidget instanceof r.NotebookPanel}),t&&t.addItem({command:w.openEditNotebookMetadata,category:"Notebook Operations"})}},R=[S,T,x,M,I,_,E,W,j,A,P]}}]);
//# sourceMappingURL=6941.26af9fd.js.map