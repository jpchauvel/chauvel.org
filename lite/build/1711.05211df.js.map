{"version":3,"file":"1711.05211df.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application-extension/lib/clear-data-dialog.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport React from 'react';\n/**\n * A widget for displaying a dialog to clear browser data\n */\nexport class ClearDataDialog extends ReactWidget {\n    /**\n     * Create a new clear data dialog\n     *\n     * @param options - The options for creating the dialog\n     */\n    constructor(options) {\n        super();\n        this._translator = options.translator;\n        this._availability = options.availability || {\n            canClearSettings: true,\n            canClearContents: true,\n            canClearWorkspaces: true,\n        };\n        this._settingsChecked = this._availability.canClearSettings;\n        this._contentsChecked = this._availability.canClearContents;\n        this._workspacesChecked = this._availability.canClearWorkspaces;\n        this.addClass('jp-ClearData-dialog');\n    }\n    /**\n     * Get the current options selected by the user\n     */\n    getValue() {\n        return {\n            clearSettings: this._settingsChecked && this._availability.canClearSettings,\n            clearContents: this._contentsChecked && this._availability.canClearContents,\n            clearWorkspaces: this._workspacesChecked && this._availability.canClearWorkspaces,\n        };\n    }\n    /**\n     * Render the dialog content\n     */\n    render() {\n        return (React.createElement(ClearDataDialogComponent, { translator: this._translator, settingsChecked: this._settingsChecked, contentsChecked: this._contentsChecked, workspacesChecked: this._workspacesChecked, availability: this._availability, setSettingsChecked: (checked) => {\n                this._settingsChecked = checked;\n                this.update();\n            }, setContentsChecked: (checked) => {\n                this._contentsChecked = checked;\n                this.update();\n            }, setWorkspacesChecked: (checked) => {\n                this._workspacesChecked = checked;\n                this.update();\n            } }));\n    }\n}\n/**\n * A React component for displaying a dialog to clear browser data\n */\nfunction ClearDataDialogComponent(props) {\n    const { translator, settingsChecked, contentsChecked, workspacesChecked, availability, setSettingsChecked, setContentsChecked, setWorkspacesChecked, } = props;\n    const trans = translator.load('@jupyterlite');\n    return (React.createElement(\"div\", { className: \"jp-ClearData-container\" },\n        React.createElement(\"div\", { className: \"jp-ClearData-warning-box\" },\n            React.createElement(\"div\", { className: \"jp-ClearData-warning-icon\" }, \"\\u26A0\\uFE0F\"),\n            React.createElement(\"div\", { className: \"jp-ClearData-warning-text\" },\n                React.createElement(\"span\", { className: \"jp-ClearData-warning-title\" }, trans.__('Warning: Data Loss Risk')),\n                React.createElement(\"p\", null, trans.__('Clearing browser data will permanently remove data stored in your browser. ' +\n                    'This operation cannot be undone and may result in loss of:')),\n                React.createElement(\"ul\", null,\n                    React.createElement(\"li\", null, trans.__('User settings and preferences')),\n                    React.createElement(\"li\", null, trans.__('Notebooks and files stored in the browser')),\n                    React.createElement(\"li\", null, trans.__('Workspace layouts and panel arrangements')),\n                    React.createElement(\"li\", null, trans.__('Unsaved work and changes'))))),\n        React.createElement(\"div\", { className: `jp-ClearData-option ${!availability.canClearSettings ? 'jp-mod-disabled' : ''}` },\n            React.createElement(\"input\", { id: \"jp-ClearData-settings\", type: \"checkbox\", checked: settingsChecked, onChange: (e) => setSettingsChecked(e.target.checked), disabled: !availability.canClearSettings }),\n            React.createElement(\"label\", { htmlFor: \"jp-ClearData-settings\", className: !availability.canClearSettings ? 'jp-mod-disabled' : '' },\n                trans.__('Settings and preferences'),\n                !availability.canClearSettings && (React.createElement(\"span\", { className: \"jp-ClearData-unavailable\" },\n                    ' ',\n                    trans.__('(unavailable)'))))),\n        React.createElement(\"div\", { className: `jp-ClearData-option ${!availability.canClearContents ? 'jp-mod-disabled' : ''}` },\n            React.createElement(\"input\", { id: \"jp-ClearData-contents\", type: \"checkbox\", checked: contentsChecked, onChange: (e) => setContentsChecked(e.target.checked), disabled: !availability.canClearContents }),\n            React.createElement(\"label\", { htmlFor: \"jp-ClearData-contents\", className: !availability.canClearContents ? 'jp-mod-disabled' : '' },\n                trans.__('Files and notebooks'),\n                !availability.canClearContents && (React.createElement(\"span\", { className: \"jp-ClearData-unavailable\" },\n                    ' ',\n                    trans.__('(unavailable)'))))),\n        React.createElement(\"div\", { className: `jp-ClearData-option ${!availability.canClearWorkspaces ? 'jp-mod-disabled' : ''}` },\n            React.createElement(\"input\", { id: \"jp-ClearData-workspaces\", type: \"checkbox\", checked: workspacesChecked, onChange: (e) => setWorkspacesChecked(e.target.checked), disabled: !availability.canClearWorkspaces }),\n            React.createElement(\"label\", { htmlFor: \"jp-ClearData-workspaces\", className: !availability.canClearWorkspaces ? 'jp-mod-disabled' : '' },\n                trans.__('Workspace layouts'),\n                !availability.canClearWorkspaces && (React.createElement(\"span\", { className: \"jp-ClearData-unavailable\" },\n                    ' ',\n                    trans.__('(unavailable)'))))),\n        React.createElement(\"div\", { className: \"jp-ClearData-reload-notice\" }, trans.__('This will reload the page after clearing the selected data.'))));\n}\n//# sourceMappingURL=clear-data-dialog.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILabShell, IRouter, JupyterFrontEnd, } from '@jupyterlab/application';\nimport { Clipboard, Dialog, ICommandPalette, showDialog, } from '@jupyterlab/apputils';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager, IDocumentWidgetOpener } from '@jupyterlab/docmanager';\nimport { IDefaultFileBrowser, IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { DocumentConnectionManager, ILSPDocumentConnectionManager, IWidgetLSPAdapterTracker, LanguageServerManager, } from '@jupyterlab/lsp';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { IDefaultDrive, ISettingManager, IWorkspaceManager, } from '@jupyterlab/services';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { clearIcon, downloadIcon, linkIcon } from '@jupyterlab/ui-components';\nimport { ILiteRouter, LiteRouter } from '@jupyterlite/application';\nimport { LiteWorkspaceManager } from '@jupyterlite/apputils';\nimport { IKernelClient } from '@jupyterlite/kernel';\nimport { IServiceWorkerManager, ServiceWorkerManager } from '@jupyterlite/server';\nimport { liteIcon, liteWordmark } from '@jupyterlite/ui-components';\nimport { BrowserStorageDrive } from '@jupyterlite/contents';\nimport { Settings } from '@jupyterlite/settings';\nimport { filter } from '@lumino/algorithm';\nimport { Widget } from '@lumino/widgets';\nimport React from 'react';\nimport { ClearDataDialog } from './clear-data-dialog';\n/**\n * A regular expression to match path to notebooks, documents and consoles\n */\nconst URL_PATTERN = new RegExp('/(lab|tree|notebooks|edit|consoles)\\\\/?');\n/**\n * The JupyterLab document manager plugin id.\n */\nconst JUPYTERLAB_DOCMANAGER_PLUGIN_ID = '@jupyterlab/docmanager-extension:plugin';\n/**\n * The command IDs used by the application extension.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.about = 'application:about';\n    CommandIDs.docmanagerDownload = 'docmanager:download';\n    CommandIDs.filebrowserDownload = 'filebrowser:download';\n    CommandIDs.copyShareableLink = 'filebrowser:share-main';\n    CommandIDs.clearBrowserData = 'application:clear-browser-data';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The name of the translation bundle for internationalized strings.\n */\nconst I18N_BUNDLE = 'jupyterlite';\n/**\n * The custom URL router provider.\n *\n * Provides IRouter, plus the additional methods to transform `/path/`-based routes\n */\nconst liteRouter = {\n    id: '@jupyterlite/application-extension:lite-router',\n    autoStart: true,\n    provides: ILiteRouter,\n    requires: [JupyterFrontEnd.IPaths],\n    activate: (app, paths) => {\n        const { commands } = app;\n        const { base } = paths.urls;\n        const router = new LiteRouter({ base, commands });\n        void app.started.then(() => {\n            // Route the very first request on load.\n            void router.route();\n            // Route all pop state events.\n            window.addEventListener('popstate', () => {\n                void router.route();\n            });\n        });\n        return router;\n    },\n};\n/**\n * The default URL router provider.\n */\nconst router = {\n    id: '@jupyterlite/application-extension:router',\n    autoStart: true,\n    provides: IRouter,\n    requires: [ILiteRouter],\n    activate: (app, router) => {\n        return router;\n    },\n};\n/**\n * Add a command to show an About dialog.\n */\nconst about = {\n    id: '@jupyterlite/application-extension:about',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ICommandPalette, IMainMenu],\n    activate: (app, translator, palette, menu) => {\n        const { commands } = app;\n        const trans = translator.load(I18N_BUNDLE);\n        const category = trans.__('Help');\n        commands.addCommand(CommandIDs.about, {\n            label: trans.__('About %1', app.name),\n            execute: () => {\n                const versionNumber = trans.__('Version %1', app.version);\n                const versionInfo = (React.createElement(\"span\", { className: \"jp-About-version-info\" },\n                    React.createElement(\"span\", { className: \"jp-About-version\" }, versionNumber)));\n                const title = (React.createElement(\"span\", { className: \"jp-About-header\" },\n                    React.createElement(\"div\", { className: \"jp-About-header-info\" },\n                        React.createElement(liteWordmark.react, { height: \"auto\", width: \"196px\" }),\n                        versionInfo)));\n                // Create the body of the about dialog\n                const jupyterliteURL = 'https://github.com/jupyterlite/jupyterlite';\n                const contributorsURL = 'https://github.com/jupyterlite/jupyterlite/graphs/contributors';\n                const externalLinks = (React.createElement(\"span\", { className: \"jp-About-externalLinks\" },\n                    React.createElement(\"a\", { href: contributorsURL, target: \"_blank\", rel: \"noopener noreferrer\", className: \"jp-Button-flat\" }, trans.__('CONTRIBUTOR LIST')),\n                    React.createElement(\"a\", { href: jupyterliteURL, target: \"_blank\", rel: \"noopener noreferrer\", className: \"jp-Button-flat\" }, trans.__('JUPYTERLITE ON GITHUB'))));\n                const copyright = (React.createElement(\"span\", { className: \"jp-About-copyright\" }, trans.__('© 2021-, JupyterLite Contributors')));\n                const body = (React.createElement(\"div\", { className: \"jp-About-body\" },\n                    externalLinks,\n                    copyright));\n                return showDialog({\n                    title,\n                    body,\n                    buttons: [\n                        Dialog.createButton({\n                            label: trans.__('Dismiss'),\n                            className: 'jp-About-button jp-mod-reject jp-mod-styled',\n                        }),\n                    ],\n                });\n            },\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.about, category });\n        }\n        if (menu) {\n            menu.helpMenu.addGroup([{ command: CommandIDs.about }], 0);\n        }\n    },\n};\n/**\n * A plugin providing download commands in the file menu and command palette.\n */\nconst downloadPlugin = {\n    id: '@jupyterlite/application-extension:download',\n    autoStart: true,\n    requires: [ITranslator, IDocumentManager],\n    optional: [ICommandPalette, IFileBrowserFactory],\n    activate: (app, translator, docManager, palette, factory) => {\n        const trans = translator.load(I18N_BUNDLE);\n        const { commands, serviceManager, shell } = app;\n        const { contents } = serviceManager;\n        const isEnabled = () => {\n            const { currentWidget } = shell;\n            return !!(currentWidget && docManager.contextForWidget(currentWidget));\n        };\n        const downloadContent = async (contentPath, fileName) => {\n            var _a, _b, _c;\n            const model = await contents.get(contentPath, { content: true });\n            const element = document.createElement('a');\n            if (model.type === 'notebook' ||\n                model.format === 'json' ||\n                model.mimetype === 'text/json') {\n                const mime = (_a = model.mimetype) !== null && _a !== void 0 ? _a : 'text/json';\n                const content = JSON.stringify(model.content, null, 2);\n                element.href = `data:${mime};charset=utf-8,${encodeURIComponent(content)}`;\n            }\n            else if (model.format === 'text' || model.mimetype === 'text/plain') {\n                const mime = (_b = model.mimetype) !== null && _b !== void 0 ? _b : 'text/plain';\n                element.href = `data:${mime};charset=utf-8,${encodeURIComponent(model.content)}`;\n            }\n            else if (model.format === 'base64' ||\n                model.mimetype === 'application/octet-stream') {\n                const mime = (_c = model.mimetype) !== null && _c !== void 0 ? _c : 'application/octet-stream';\n                element.href = `data:${mime};base64,${model.content}`;\n            }\n            else {\n                throw new Error(`Content whose mimetype is \"${model.mimetype}\" cannot be downloaded`);\n            }\n            element.download = fileName;\n            document.body.appendChild(element);\n            element.click();\n            document.body.removeChild(element);\n        };\n        commands.addCommand(CommandIDs.docmanagerDownload, {\n            label: trans.__('Download'),\n            caption: trans.__('Download the file to your computer'),\n            isEnabled,\n            execute: async () => {\n                // Checks that shell.currentWidget is valid:\n                const current = shell.currentWidget;\n                if (!isEnabled() || !current) {\n                    return;\n                }\n                const context = docManager.contextForWidget(current);\n                if (!context) {\n                    return showDialog({\n                        title: trans.__('Cannot Download'),\n                        body: trans.__('No context found for current widget!'),\n                        buttons: [Dialog.okButton({ label: trans.__('OK') })],\n                    });\n                }\n                await context.save();\n                try {\n                    await downloadContent(context.path, context.path);\n                }\n                catch (e) {\n                    return showDialog({\n                        title: trans.__('Cannot Download'),\n                        body: JSON.stringify(e),\n                        buttons: [Dialog.okButton({ label: trans.__('OK') })],\n                    });\n                }\n            },\n        });\n        const category = trans.__('File Operations');\n        if (palette) {\n            palette.addItem({ command: CommandIDs.docmanagerDownload, category });\n        }\n        if (factory) {\n            const { tracker } = factory;\n            commands.addCommand(CommandIDs.filebrowserDownload, {\n                execute: async () => {\n                    const widget = tracker.currentWidget;\n                    if (!widget) {\n                        return;\n                    }\n                    const selected = Array.from(widget.selectedItems());\n                    selected.forEach(async (item) => {\n                        if (item.type !== 'directory') {\n                            try {\n                                await downloadContent(item.path, item.name);\n                            }\n                            catch (e) {\n                                return showDialog({\n                                    title: trans.__('Cannot Download'),\n                                    body: JSON.stringify(e),\n                                    buttons: [Dialog.okButton({ label: trans.__('OK') })],\n                                });\n                            }\n                        }\n                    });\n                },\n                icon: downloadIcon.bindprops({ stylesheet: 'menuItem' }),\n                label: trans.__('Download'),\n            });\n        }\n    },\n};\n/**\n * The main application icon.\n */\nconst liteLogo = {\n    id: '@jupyterlite/application-extension:logo',\n    // marking as optional to not throw errors in Notebook\n    optional: [ILabShell],\n    autoStart: true,\n    activate: (app, labShell) => {\n        if (!labShell) {\n            return;\n        }\n        const logo = new Widget();\n        liteIcon.element({\n            container: logo.node,\n            elementPosition: 'center',\n            margin: '2px 2px 2px 8px',\n            height: 'auto',\n            width: '16px',\n        });\n        logo.id = 'jp-MainLogo';\n        labShell.add(logo, 'top', { rank: 0 });\n    },\n};\n/**\n * A plugin to provide the language server connection manager\n *\n * Currently does nothing until LSP is supported in JupyterLite\n */\nconst lspConnectionManager = {\n    id: '@jupyterlite/application-extension:lsp-connection-manager',\n    autoStart: true,\n    requires: [IWidgetLSPAdapterTracker],\n    provides: ILSPDocumentConnectionManager,\n    activate: (app, tracker) => {\n        const languageServerManager = new (class extends LanguageServerManager {\n            async fetchSessions() {\n                // no-op\n            }\n        })({\n            settings: app.serviceManager.serverSettings,\n        });\n        const connectionManager = new DocumentConnectionManager({\n            languageServerManager,\n            adapterTracker: tracker,\n        });\n        return connectionManager;\n    },\n};\n/**\n * A plugin to trigger a refresh of the commands when the shell layout changes.\n */\nconst notifyCommands = {\n    id: '@jupyterlite/application-extension:notify-commands',\n    autoStart: true,\n    optional: [ILabShell],\n    activate: (app, labShell) => {\n        if (labShell) {\n            labShell.layoutModified.connect(() => {\n                app.commands.notifyCommandChanged();\n            });\n        }\n    },\n};\n/**\n * A custom opener plugin to pass the path to documents as\n * query string parameters.\n */\nconst opener = {\n    id: '@jupyterlite/application-extension:opener',\n    autoStart: true,\n    requires: [IRouter, IDocumentManager],\n    optional: [ILabShell, ISettingRegistry],\n    activate: (app, router, docManager, labShell, settingRegistry) => {\n        const { commands, docRegistry } = app;\n        const command = 'router:tree';\n        commands.addCommand(command, {\n            execute: (args) => {\n                var _a;\n                const parsed = args;\n                // use request to do the matching\n                const { request, search } = parsed;\n                const matches = (_a = request.match(URL_PATTERN)) !== null && _a !== void 0 ? _a : [];\n                if (!matches) {\n                    return;\n                }\n                const urlParams = new URLSearchParams(search);\n                const paths = urlParams.getAll('path');\n                if (paths.length === 0) {\n                    return;\n                }\n                const files = paths.map((path) => decodeURIComponent(path));\n                app.started.then(async () => {\n                    var _a;\n                    const page = PageConfig.getOption('notebookPage');\n                    const [file] = files;\n                    if (page === 'tree') {\n                        let appUrl = '/edit';\n                        // check if the file is a notebook\n                        const defaultFactory = docRegistry.defaultWidgetFactory(file);\n                        if (defaultFactory.name === 'Notebook') {\n                            appUrl = '/notebooks';\n                        }\n                        const baseUrl = PageConfig.getBaseUrl();\n                        const url = new URL(URLExt.join(baseUrl, appUrl, 'index.html'));\n                        url.searchParams.append('path', file);\n                        // redirect to the proper page\n                        window.location.href = url.toString();\n                        return;\n                    }\n                    else if (page === 'consoles') {\n                        commands.execute('console:create', { path: file });\n                        return;\n                    }\n                    else if (page === 'notebooks' || page === 'edit') {\n                        let defaultFactory = docRegistry.defaultWidgetFactory(file).name;\n                        // Explicitly get the default viewers from the settings because\n                        // JupyterLab might not have had the time to load the settings yet (race condition)\n                        // Relevant code: https://github.com/jupyterlab/jupyterlab/blob/d56ff811f39b3c10c6d8b6eb27a94624b753eb53/packages/docmanager-extension/src/index.tsx#L265-L293\n                        if (settingRegistry) {\n                            const settings = await settingRegistry.load(JUPYTERLAB_DOCMANAGER_PLUGIN_ID);\n                            const defaultViewers = settings.get('defaultViewers').composite;\n                            // get the file types for the path\n                            const types = docRegistry.getFileTypesForPath(file);\n                            // for each file type, check if there is a default viewer and if it\n                            // is available in the docRegistry. If it is the case, use it as the\n                            // default factory\n                            types.forEach((ft) => {\n                                if (defaultViewers[ft.name] !== undefined &&\n                                    docRegistry.getWidgetFactory(defaultViewers[ft.name])) {\n                                    defaultFactory = defaultViewers[ft.name];\n                                }\n                            });\n                        }\n                        const factory = (_a = urlParams.get('factory')) !== null && _a !== void 0 ? _a : defaultFactory;\n                        docManager.open(file, factory, undefined, {\n                            ref: '_noref',\n                        });\n                    }\n                    else {\n                        // open all files in the lab interface\n                        files.forEach((file) => docManager.open(file));\n                        const url = new URL(URLExt.join(PageConfig.getBaseUrl(), request));\n                        // only remove the path (to keep extra parameters like the RTC room)\n                        url.searchParams.delete('path');\n                        const { pathname, search } = url;\n                        router.navigate(`${pathname}${search}`, { skipRouting: true });\n                        if (labShell) {\n                            // open the folder where the files are located on startup\n                            const showInBrowser = () => {\n                                commands.execute('docmanager:show-in-file-browser');\n                                labShell.currentChanged.disconnect(showInBrowser);\n                            };\n                            labShell.currentChanged.connect(showInBrowser);\n                        }\n                    }\n                });\n            },\n        });\n        router.register({ command, pattern: URL_PATTERN });\n    },\n};\n/**\n * A plugin installing the service worker.\n */\nconst serviceWorkerManagerPlugin = {\n    id: '@jupyterlite/application-extension:service-worker-manager',\n    autoStart: true,\n    provides: IServiceWorkerManager,\n    optional: [IKernelClient],\n    activate: (app, kernelClient) => {\n        const { contents } = app.serviceManager;\n        const serviceWorkerManager = new ServiceWorkerManager({ contents });\n        if (kernelClient !== undefined) {\n            serviceWorkerManager.registerStdinHandler('kernel', kernelClient.handleStdin.bind(kernelClient));\n        }\n        return serviceWorkerManager;\n    },\n};\n/**\n * A plugin to patch the session context path so it includes the drive name.\n * TODO: investigate a better way for the kernel to be aware of the drive it is\n * associated with.\n */\nconst sessionContextPatch = {\n    id: '@jupyterlite/application-extension:session-context-patch',\n    autoStart: true,\n    requires: [IDocumentManager, IDocumentWidgetOpener],\n    activate: (app, docManager, widgetOpener) => {\n        const contents = app.serviceManager.contents;\n        widgetOpener.opened.connect((_, widget) => {\n            var _a;\n            const context = docManager.contextForWidget(widget);\n            const driveName = contents.driveName((_a = context === null || context === void 0 ? void 0 : context.path) !== null && _a !== void 0 ? _a : '');\n            if (driveName === '') {\n                // do nothing if this is the default drive\n                return;\n            }\n            const sessionContext = widget.context.sessionContext;\n            // Path the session context to include the drive name\n            // In JupyterLab 3 the path used to contain the drive name as prefix, which was\n            // also part of the /api/sessions requests. Which allowed for knowing the drive associated\n            // with a kernel.\n            // This was changed in JupyterLab 4 in https://github.com/jupyterlab/jupyterlab/pull/14519\n            // and is needed for the kernel to be aware of the drive it is associated with.\n            // This is a temporary fix until a better solution is found upstream in JupyterLab ideally.\n            // This also avoid having to patch the downstream kernels (e.g. xeus-python and pyodide)\n            sessionContext['_name'] = context === null || context === void 0 ? void 0 : context.path;\n            sessionContext['_path'] = context === null || context === void 0 ? void 0 : context.path;\n        });\n    },\n};\n/**\n * A custom plugin to share a link to a file.\n *\n * This url can be used to open a particular file in JupyterLab.\n * It also adds the corresponding room if RTC is enabled.\n *\n */\nconst shareFile = {\n    id: '@jupyterlite/application-extension:share-file',\n    requires: [IFileBrowserFactory, ITranslator],\n    autoStart: true,\n    activate: (app, factory, translator) => {\n        const trans = translator.load(I18N_BUNDLE);\n        const { commands, docRegistry } = app;\n        const { tracker } = factory;\n        commands.addCommand(CommandIDs.copyShareableLink, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                const baseUrl = PageConfig.getBaseUrl();\n                let appUrl = PageConfig.getOption('appUrl');\n                const models = Array.from(filter(widget.selectedItems(), (item) => item.type !== 'directory'));\n                if (!models.length) {\n                    return;\n                }\n                // In the notebook application:\n                // - only copy the first element\n                // - open /notebooks if it's a notebook, /edit otherwise\n                if (appUrl === '/tree') {\n                    const [model] = models;\n                    const defaultFactory = docRegistry.defaultWidgetFactory(model.path);\n                    if (defaultFactory.name === 'Notebook') {\n                        appUrl = '/notebooks';\n                    }\n                    else {\n                        appUrl = '/edit';\n                    }\n                }\n                const url = new URL(URLExt.join(baseUrl, appUrl, 'index.html'));\n                models.forEach((model) => {\n                    url.searchParams.append('path', model.path);\n                });\n                Clipboard.copyToSystem(url.href);\n            },\n            isVisible: () => !!tracker.currentWidget &&\n                Array.from(tracker.currentWidget.selectedItems()).length >= 1,\n            icon: linkIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Copy Shareable Link'),\n        });\n    },\n};\n/**\n * A plugin to add a command for clearing browser data.\n */\nconst clearBrowserData = {\n    id: '@jupyterlite/application-extension:clear-browser-data',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [\n        ICommandPalette,\n        ISettingManager,\n        IDefaultDrive,\n        IDefaultFileBrowser,\n        IWorkspaceManager,\n    ],\n    activate: (app, translator, palette, settingManager, defaultDrive, defaultFileBrowser, workspaceManager) => {\n        const { commands } = app;\n        const trans = translator.load(I18N_BUNDLE);\n        const category = trans.__('Help');\n        const isBrowserStorageDrive = defaultDrive instanceof BrowserStorageDrive;\n        const isLiteSettingsManager = settingManager instanceof Settings;\n        const isLiteWorkspaceManager = workspaceManager instanceof LiteWorkspaceManager;\n        if (!isBrowserStorageDrive && !isLiteSettingsManager && !isLiteWorkspaceManager) {\n            // not available if none of the default managers\n            // are the ones provided by JupyterLite by default\n            return;\n        }\n        // Add a CSS class to the drive if it is a BrowserStorageDrive for the context menu entry\n        if (isBrowserStorageDrive && defaultFileBrowser) {\n            defaultFileBrowser.addClass('jp-BrowserStorageDrive');\n        }\n        const clearData = async (options) => {\n            const { clearSettings, clearContents, clearWorkspaces } = options;\n            const promises = [];\n            if (clearContents && isBrowserStorageDrive) {\n                const browserStorageDrive = defaultDrive;\n                promises.push(browserStorageDrive.clearStorage());\n            }\n            if (clearSettings && isLiteSettingsManager) {\n                const settings = settingManager;\n                promises.push(settings.clear());\n            }\n            if (clearWorkspaces && isLiteWorkspaceManager) {\n                const workspace = workspaceManager;\n                promises.push(workspace.clear());\n            }\n            await Promise.all(promises);\n            window.location.reload();\n        };\n        commands.addCommand(CommandIDs.clearBrowserData, {\n            label: trans.__('Clear Browser Data'),\n            icon: (args) => (args['isPalette'] ? undefined : clearIcon),\n            execute: async () => {\n                // Pass the availability information to the dialog\n                const availability = {\n                    canClearSettings: isLiteSettingsManager && !!settingManager,\n                    canClearContents: isBrowserStorageDrive && !!defaultDrive,\n                    canClearWorkspaces: isLiteWorkspaceManager && !!workspaceManager,\n                };\n                const body = new ClearDataDialog({\n                    translator,\n                    availability,\n                });\n                const result = await showDialog({\n                    title: trans.__('Clear Browser Data'),\n                    body,\n                    buttons: [\n                        Dialog.cancelButton({ label: trans.__('Cancel') }),\n                        Dialog.warnButton({ label: trans.__('Clear') }),\n                    ],\n                });\n                if (result.button.accept) {\n                    return clearData(body.getValue());\n                }\n                return await Promise.resolve();\n            },\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.clearBrowserData, category });\n        }\n    },\n};\n/**\n * A plugin to configure the application mode (single-document vs multiple-document)\n */\nconst modeSupport = {\n    id: '@jupyterlite/application-extension:mode-support',\n    autoStart: true,\n    optional: [ILabShell, IRouter],\n    activate: (app, labShell, router) => {\n        // only effective in JupyterLab\n        if (!labShell) {\n            return;\n        }\n        // Query string parameter has higher priority\n        const url = new URL(window.location.href);\n        const urlMode = url.searchParams.get('mode');\n        const mode = urlMode || PageConfig.getOption('mode') || 'multiple-document';\n        // Wait for the app to be restored before setting the mode\n        // so the switch button has time to set the signal\n        app.restored.then(() => {\n            // Only set the mode if it's valid\n            if (mode === 'single-document' || mode === 'multiple-document') {\n                labShell.mode = mode;\n                // Update PageConfig to match the effective mode\n                PageConfig.setOption('mode', mode);\n            }\n        });\n        // Watch the mode and update the URL to reflect the change\n        labShell.modeChanged.connect((_, newMode) => {\n            const currentUrl = new URL(window.location.href);\n            const currentUrlMode = currentUrl.searchParams.get('mode');\n            // Update the URL parameter if it differs from the new mode\n            if (currentUrlMode !== newMode) {\n                currentUrl.searchParams.set('mode', newMode);\n                if (router) {\n                    const { pathname, search } = currentUrl;\n                    router.navigate(`${pathname}${search}`, { skipRouting: true });\n                }\n            }\n            PageConfig.setOption('mode', newMode);\n        });\n    },\n};\nconst plugins = [\n    about,\n    clearBrowserData,\n    downloadPlugin,\n    liteRouter,\n    liteLogo,\n    lspConnectionManager,\n    modeSupport,\n    notifyCommands,\n    opener,\n    router,\n    serviceWorkerManagerPlugin,\n    sessionContextPatch,\n    shareFile,\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"names":["ClearDataDialog","ReactWidget","constructor","options","super","this","_translator","translator","_availability","availability","canClearSettings","canClearContents","canClearWorkspaces","_settingsChecked","_contentsChecked","_workspacesChecked","addClass","getValue","clearSettings","clearContents","clearWorkspaces","render","ClearDataDialogComponent","settingsChecked","contentsChecked","workspacesChecked","setSettingsChecked","checked","update","setContentsChecked","setWorkspacesChecked","props","trans","load","className","__","id","type","onChange","e","target","disabled","htmlFor","URL_PATTERN","RegExp","CommandIDs","about","docmanagerDownload","filebrowserDownload","copyShareableLink","clearBrowserData","I18N_BUNDLE","liteRouter","autoStart","provides","ILiteRouter","requires","JupyterFrontEnd","IPaths","activate","app","paths","commands","base","urls","router","LiteRouter","started","then","route","window","addEventListener","IRouter","ITranslator","optional","ICommandPalette","IMainMenu","palette","menu","category","addCommand","label","name","execute","versionNumber","version","versionInfo","title","liteWordmark","react","height","width","externalLinks","href","rel","copyright","body","showDialog","buttons","Dialog","createButton","addItem","command","helpMenu","addGroup","downloadPlugin","IDocumentManager","IFileBrowserFactory","docManager","factory","serviceManager","shell","contents","isEnabled","currentWidget","contextForWidget","downloadContent","async","contentPath","fileName","_a","_b","_c","model","get","content","element","document","createElement","format","mimetype","mime","JSON","stringify","encodeURIComponent","Error","download","appendChild","click","removeChild","caption","current","context","okButton","save","path","tracker","widget","Array","from","selectedItems","forEach","item","icon","downloadIcon","bindprops","stylesheet","liteLogo","ILabShell","labShell","logo","Widget","liteIcon","container","node","elementPosition","margin","add","rank","lspConnectionManager","IWidgetLSPAdapterTracker","ILSPDocumentConnectionManager","languageServerManager","LanguageServerManager","fetchSessions","settings","serverSettings","DocumentConnectionManager","adapterTracker","notifyCommands","layoutModified","connect","notifyCommandChanged","ISettingRegistry","settingRegistry","docRegistry","args","parsed","request","search","match","urlParams","URLSearchParams","getAll","length","files","map","decodeURIComponent","page","PageConfig","getOption","file","appUrl","defaultWidgetFactory","baseUrl","getBaseUrl","url","URL","URLExt","join","searchParams","append","location","toString","defaultFactory","defaultViewers","composite","getFileTypesForPath","ft","undefined","getWidgetFactory","open","ref","delete","pathname","navigate","skipRouting","showInBrowser","currentChanged","disconnect","register","pattern","serviceWorkerManagerPlugin","IServiceWorkerManager","IKernelClient","kernelClient","serviceWorkerManager","ServiceWorkerManager","registerStdinHandler","handleStdin","bind","sessionContextPatch","IDocumentWidgetOpener","widgetOpener","opened","_","driveName","sessionContext","shareFile","models","filter","Clipboard","copyToSystem","isVisible","linkIcon","ISettingManager","IDefaultDrive","IDefaultFileBrowser","IWorkspaceManager","settingManager","defaultDrive","defaultFileBrowser","workspaceManager","isBrowserStorageDrive","BrowserStorageDrive","isLiteSettingsManager","Settings","isLiteWorkspaceManager","LiteWorkspaceManager","clearIcon","cancelButton","warnButton","button","accept","promises","browserStorageDrive","push","clearStorage","clear","workspace","Promise","all","reload","clearData","resolve","modeSupport","mode","restored","setOption","modeChanged","newMode","currentUrl","set"],"sourceRoot":""}